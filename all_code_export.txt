


==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\pages\Home.tsx
==============================

import PageLayout from "@/components/layout/PageLayout";
import Section from "@/components/ui/Section";
import Tile from "@/components/ui/Tile";
import Button from "@/components/ui/Button";
import FadeIn from "@/components/ui/FadeIn";
import { Subtitle, Body } from "@/components/ui/Tokens";
import { spacing, colors, shadows } from "@/lib/tokens";
import { cn } from "@/lib/utils";
import profileImg from "@/assets/profile-felix.png";
import {
  ExpertiseSection,
  ProjectsSection,
  ContactSection,
} from "@/components/sections/home";

export default function Home() {
  const metrics = [
    { number: "10+", title: "Years Experience", desc: "UX strategy & research leadership" },
    { number: "25+", title: "Research Methods", desc: "Qualitative & quantitative expertise" },
    { number: "5", title: "Industries", desc: "E-commerce, finance, insurance & more" },
    { number: "200+", title: "Studies", desc: "End-to-end user research projects" },
  ];

  return (
    <PageLayout>
      {/* ===== Intro-Text mit Portrait ===== */}
      <Section id="intro" borderBottom>
        <div className={cn("grid md:grid-cols-[1.1fr_0.9fr] gap-10 items-center")}>
          <div>
            <Subtitle className="text-foreground mb-4">
              Iâ€™m a UX Research Lead passionate about connecting strategy, insight, and execution.
            </Subtitle>
            <Body className="text-muted-foreground max-w-prose">
              My work bridges business goals and user needs through mixed-method research and scalable ResearchOps.
              By combining qualitative depth and quantitative validation, I enable teams to make confident,
              user-centered decisions.
            </Body>

            <div className={cn("flex flex-wrap gap-4 mt-8")}>
              <Button asChild to="/cv" variant="secondary" size="lg">
                View CV
              </Button>
              <Button asChild to="/#projects" variant="secondary" size="lg">
                See Projects
              </Button>
              <Button asChild to="/#expertise" variant="secondary" size="lg">
                Explore Expertise
              </Button>
            </div>
          </div>

          <img
            src={profileImg}
            alt="Portrait of Felix Bruckmeier"
            className={cn(
              "rounded-2xl shadow-lg mx-auto w-[70%] md:w-[80%] object-cover aspect-[4/5]",
              colors.border
            )}
          />
        </div>
      </Section>

      {/* ===== KPI-Tiles ===== */}
      <Section id="facts" borderBottom>
        <div
          className={cn(
            "grid grid-cols-2 md:grid-cols-4 w-full text-center",
            spacing.gap6,
            spacing.mt10
          )}
        >
          {metrics.map((m, i) => (
            <FadeIn key={i} delay={0.2 + i * 0.1}>
              <Tile
                variant="static"
                className={cn(
                  colors.tile.bg,
                  colors.tile.text,
                  "text-center border border-border/10",
                  spacing.p6,
                  shadows.sm,
                  "rounded-xl"
                )}
              >
                <Subtitle className="font-bold">{m.number}</Subtitle>
                <Body className="font-semibold text-foreground mt-1">{m.title}</Body>
                <Body className="text-muted-foreground mt-1">{m.desc}</Body>
              </Tile>
            </FadeIn>
          ))}
        </div>
      </Section>

      {/* ===== Expertise Section ===== */}
      <ExpertiseSection />

      {/* ===== Projects Section ===== */}
      <ProjectsSection />

      {/* ===== Kontakt ===== */}
      <Section id="contact" borderTop>
        <ContactSection />
      </Section>
    </PageLayout>
  );
}




==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\pages\NotFound.tsx
==============================

// src/pages/NotFound.tsx
import Button from "@/components/ui/Button";
import { cn } from "@/lib/utils";
import { colors, spacing } from "@/lib/tokens";

export default function NotFound() {
  return (
    <main className={cn("min-h-[60vh] grid place-items-center px-6", colors.background.text)}>
      <div className="text-center">
        <h1 className="text-3xl font-bold">404 â€” Not Found</h1>
        <p className={cn(spacing.mt2, colors.muted.text)}>
          Sorry, die Seite gibtâ€™s nicht. ZurÃ¼ck zur Startseite?
        </p>
        <div className={spacing.mt4}>
          <Button asChild variant="secondary">
            <a href="/">Home</a>
          </Button>
        </div>
      </div>
    </main>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\lib\SkillmapColors.ts
==============================

// src/lib/SkillmapColors.ts
import { colors } from "@/lib/tokens";

/**
 * Skillmap-Farben (Design-System-konform)
 * bg â†’ blasse Variante (fÃ¼r FlÃ¤chen / Legende)
 * strong â†’ krÃ¤ftige Variante (fÃ¼r Punkte im Chart)
 */
export const themeColors: Record<
  string,
  { bg: string; strong: string; hex: string }
> = {
  "Coordination & Data Management": {
    bg: colors.notion.gray.bg,
    strong: colors.notion.gray.text,
    hex: "#6B7280",
  },
  "Evaluative Testing": {
    bg: colors.notion.orange.bg,
    strong: colors.notion.orange.text,
    hex: "#F59E0B",
  },
  "Debrief & Analysis": {
    bg: colors.notion.brown.bg,
    strong: colors.notion.brown.text,
    hex: "#92400E",
  },
  "Interview Planning & Execution": {
    bg: colors.notion.blue.bg,
    strong: colors.notion.blue.text,
    hex: "#3B82F6",
  },
  "Basic Quantitative Work": {
    bg: colors.notion.yellow.bg,
    strong: colors.notion.yellow.text,
    hex: "#EAB308",
  },
  Synthesis: {
    bg: colors.notion.purple.bg,
    strong: colors.notion.purple.text,
    hex: "#8B5CF6",
  },
  "Stakeholder Engagement": {
    bg: colors.notion.pink.bg,
    strong: colors.notion.pink.text,
    hex: "#EC4899",
  },
  "Structured Modeling": {
    bg: colors.notion.green.bg,
    strong: colors.notion.green.text,
    hex: "#10B981",
  },
  "Integration in Service Delivery": {
    bg: colors.notion.default.bg,
    strong: colors.notion.default.text,
    hex: "#4B5563",
  },
  Broadcasting: {
    bg: colors.notion.red.bg,
    strong: colors.notion.red.text,
    hex: "#EF4444",
  },
  "Business Alignment": {
    bg: colors.notion.yellow.bg,
    strong: colors.notion.yellow.text,
    hex: "#EAB308",
  },
  "Amplify the Practice": {
    bg: colors.notion.purple.bg,
    strong: colors.notion.purple.text,
    hex: "#8B5CF6",
  },
  "Strategic Direction": {
    bg: colors.notion.orange.bg,
    strong: colors.notion.orange.text,
    hex: "#F59E0B",
  },
};



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\lib\tagColors.ts
==============================

import { NotionColor } from "@/lib/tokens";

export const tagColorMap: Record<string, NotionColor> = {
  Leadership: "blue",
  Quant: "yellow",
  Consulting: "green",
  ResearchOps: "purple",
  Insurance: "red",
  "E-commerce": "orange",
  B2B: "brown",
  B2C: "pink",
  B2B2C: "blue",
  Experiments: "purple",
  Enterprise: "gray",
};



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\lib\tokens.ts
==============================

// ================================
// ðŸŽ¨ COLORS
// ================================
export const palette = {
  notion: {
    default: { text: "text-[#373530] dark:text-[#D4D4D4]", bg: "bg-[#F7F7F7] dark:bg-[#191919]" },
    gray: { text: "text-[#787774] dark:text-[#9B9B9B]", bg: "bg-[#F1F1EF] dark:bg-[#252525]" },
    brown: { text: "text-[#976D57] dark:text-[#A27763]", bg: "bg-[#F3EEEE] dark:bg-[#2E2724]" },
    orange: { text: "text-[#CC782F] dark:text-[#CB7B37]", bg: "bg-[#F8ECDF] dark:bg-[#36291F]" },
    yellow: { text: "text-[#C29343] dark:text-[#C19138]", bg: "bg-[#FAF3DD] dark:bg-[#372E20]" },
    green: { text: "text-[#548164] dark:text-[#4F9768]", bg: "bg-[#EEF3ED] dark:bg-[#242B26]" },
    blue: { text: "text-[#487CA5] dark:text-[#447ACB]", bg: "bg-[#E9F3F7] dark:bg-[#1F282D]" },
    purple: { text: "text-[#8A67AB] dark:text-[#865DBB]", bg: "bg-[#F6F3F8] dark:bg-[#2A2430]" },
    pink: { text: "text-[#B35488] dark:text-[#BA4A78]", bg: "bg-[#F9F2F5] dark:bg-[#2E2328]" },
    red: { text: "text-[#C4554D] dark:text-[#BE524B]", bg: "bg-[#FAECEC] dark:bg-[#332523]" },
  },
} as const;

export const colors = {
  background: { bg: "bg-background", text: "text-foreground" },
  border: "border-border",
  primary: { bg: "bg-primary", text: "text-primary-foreground" },
  secondary: { bg: "bg-secondary", text: "text-secondary-foreground" },
  accent: { bg: "bg-accent", text: "text-accent-foreground" },
  muted: { bg: "bg-muted", text: "text-muted-foreground" },
  notion: palette.notion,
  tile: {
    bg: "bg-[#F9F9F9] dark:bg-[#1C1C1C]",
    text: "text-muted-foreground",
  },
  success: { bg: "bg-green-500", text: "text-green-50" },
  warning: { bg: "bg-yellow-500", text: "text-yellow-900" },
  error: { bg: "bg-red-500", text: "text-red-50" },
  info: { bg: "bg-blue-500", text: "text-blue-50" },
  overlay: { bg: "bg-black/50" },
  foreground: "text-foreground",
} as const;

export type NotionColor = keyof typeof palette.notion;

// ================================
// âœï¸ TYPOGRAPHY
// ================================
export const typography = {
  hero: {
    font: "[font-family:var(--font-display)]",
    size: "text-5xl md:text-7xl",
    weight: "font-extrabold",
    tracking: "tracking-tight",
    leading: "leading-tight",
  },
  sectionTitle: {
    font: "[font-family:var(--font-display)]",
    size: "text-3xl md:text-5xl",
    weight: "font-bold",
    tracking: "tracking-tight",
    leading: "leading-snug",
  },
  subtitle: {
    font: "[font-family:var(--font-sans)]",
    size: "text-lg",
    weight: "font-semibold",
    leading: "leading-relaxed",
    color: "text-foreground/90",
  },
  body: {
    font: "[font-family:var(--font-sans)]",
    size: "text-base md:text-lg",
    weight: "font-normal",
    leading: "leading-relaxed",
  },
  small: {
    font: "[font-family:var(--font-sans)]",
    size: "text-sm",
    weight: "font-medium",
    leading: "leading-normal",
    color: "text-muted-foreground",
  },
  tag: {
    font: "[font-family:var(--font-sans)]",
    size: "text-xs",
    weight: "font-medium",
    leading: "leading-tight",
  },
  caption: {
    font: "[font-family:var(--font-sans)]",
    size: "text-xs",
    weight: "font-normal",
    leading: "leading-snug",
    color: "text-muted-foreground",
  },
  quote: {
    font: "[font-family:var(--font-serif)]",
    size: "text-xl md:text-2xl",
    weight: "font-medium",
    leading: "leading-relaxed",
    color: "text-foreground italic",
  },
  code: {
    font: "font-mono",
    size: "text-sm",
    weight: "font-normal",
    leading: "leading-snug",
    color: "text-accent-foreground",
  },
  button: {
    font: "[font-family:var(--font-sans)]",
    size: "text-sm",
    weight: "font-medium",
    leading: "leading-normal",
  },
} as const;

// ================================
// ðŸ“– SECTION INTRO
// ================================
export const sectionIntro = {
  default: "max-w-4xl",
  full: "max-w-none",
} as const;

// ================================
// ðŸ“ SPACING & LAYOUT
// ================================
export const sectionSpacing = {
  sm: "py-8",
  md: "py-16",
  lg: "py-24",
  xl: "py-32",
} as const;

export const sectionInnerSpacing = {
  titleMargin: "mb-12",
  subtitleMargin: "mb-8",
} as const;

export const spacing = {
  mt2: "mt-2",
  mt3: "mt-3",
  mt4: "mt-4",
  mt5: "mt-5",
  mt6: "mt-6",
  mt8: "mt-8",
  mt10: "mt-10",
  mt12: "mt-12",
  mt14: "mt-14",
  mt16: "mt-16",
  mt20: "mt-20",
  mt24: "mt-24",
  mtLg: "mt-10",
  mb2: "mb-2",
  mb3: "mb-3",
  mb4: "mb-4",
  mb6: "mb-6",
  mb8: "mb-8",
  mb10: "mb-10",
  mb12: "mb-12",
  mb14: "mb-14",
  mb16: "mb-16",
  mb20: "mb-20",
  mb24: "mb-24",
  pt4: "pt-4",
  pt6: "pt-6",
  pb4: "pb-4",
  pb6: "pb-6",
  pl4: "pl-4",
  pl8: "pl-8",
  p3: "p-3",
  p4: "p-4",
  p6: "p-6",
  p8: "p-8",
  py4: "py-4",
  py8: "py-8",
  py12: "py-12",
  pxSection: "px-6 md:px-8",
  pxCard: "px-4 md:px-6",
  gap2: "gap-2",
  gap3: "gap-3",
  gap4: "gap-4",
  gap6: "gap-6",
  gap8: "gap-8",
  gap10: "gap-10",
  stackXs: "space-y-1",
  stackSm: "space-y-2",
  stackMd: "space-y-4",
  stackLg: "space-y-6",
  blockGapSm: "space-y-6",
  blockGapMd: "space-y-10",
  blockGapLg: "space-y-16",
} as const;

// âœ… layout mit dynamischer Breite (fÃ¼r 4K, WQHD usw.)
export const layout = {
 containerDynamic: "mx-auto w-full max-w-[1900px] px-[3vw]", // ðŸ”¹ NEU: responsive Container
  containerNarrow: "mx-auto max-w-[1100px] px-4 sm:px-6 lg:px-8",
  containerDefault: "mx-auto max-w-[1280px] px-6 lg:px-8",
  containerWide: "mx-auto max-w-[1440px] px-8 lg:px-10",
  container: "mx-auto max-w-6xl px-4 sm:px-6 lg:px-8",

  gridGap: spacing.gap6,
  gridCols2: "grid md:grid-cols-2",
  gridCols3: "grid sm:grid-cols-2 lg:grid-cols-3",
  gridCols4: "grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4",
  gridHero: "md:grid-cols-[1.1fr_0.9fr]",
  flexCenter: "flex items-center justify-center",
  flexBetween: "flex items-center justify-between",
  flexColCenter: "flex flex-col items-center justify-center",
  flexCol: "flex flex-col",
  itemsStart: "items-start",
  textLeft: "text-left",
  block: "block",
  imageCover: "w-full max-h-40 object-cover",
  stickyBelowNav: "sticky top-24 md:top-28",
  stickyTop: "sticky top-0",
  fullWidth: "w-full",
  maxWidthText: "max-w-5xl mx-auto",
  fullHeight: "h-full",
  scrollOffset: "scroll-mt-36 md:scroll-mt-40",
} as const;

// ================================
// ðŸ”º RADII & SHADOWS
// ================================
export const radii = {
  none: "rounded-none",
  sm: "rounded-md",
  md: "rounded-lg",
  lg: "rounded-xl",
  xl: "rounded-2xl",
  xxl: "rounded-3xl",
  full: "rounded-full",
} as const;

export const shadows = {
  none: "shadow-none",
  sm: "shadow-sm",
  md: "shadow-md",
  lg: "shadow-lg",
  xl: "shadow-xl",
  inner: "shadow-inner",
} as const;

// ================================
// ðŸ”˜ BUTTON VARIANTS + SIZES
// ================================
export const buttonVariants = {
  base: "inline-flex items-center justify-center rounded-3xl px-5 py-2.5 transition-colors duration-200",
  primary: "bg-primary text-primary-foreground hover:bg-neutral-900 dark:hover:bg-neutral-200",
  secondary: "bg-muted text-foreground hover:bg-neutral-300 dark:hover:bg-neutral-700",
  ghost: "text-foreground hover:bg-neutral-200 dark:hover:bg-neutral-700",
  danger: "bg-red-600 text-white hover:bg-red-700",
  success: "bg-green-600 text-white hover:bg-green-700",
  link: "bg-transparent text-primary underline-offset-2 hover:underline",
  minimal: "bg-transparent text-foreground hover:bg-neutral-200 dark:hover:bg-neutral-600",
} as const;

export const buttonSizes = {
  sm: "px-3 py-1.5 text-sm",
  md: "px-5 py-2.5 text-base",
  lg: "px-6 py-3 text-lg",
} as const;

// ================================
// ðŸ–± HOVER EFFECTS
// ================================
export const hoverEffects = {
  subtleOpacity: "transition-opacity duration-200 hover:opacity-80",
  lift: "transition-transform duration-300 hover:-translate-y-0.5 hover:scale-[1.01]",
  bgAccent: "hover:bg-accent/80",
  scale: "transition-transform duration-200 hover:scale-105",
  rotate: "transition-transform duration-200 hover:rotate-6",
  slide: "transition-all duration-300 ease-in-out",
  smoothLift:
    "transition-all duration-300 ease-in-out hover:scale-[1.01] hover:bg-neutral-200 dark:hover:bg-neutral-800",
} as const;

// ================================
// ðŸŽ¬ TRANSITIONS
// ================================
export const transitions = {
  default: "transition duration-200 ease-in-out",
  shadow: "transition-shadow duration-200",
  opacity: "transition-opacity duration-200",
} as const;

// ================================
// ðŸ“Š Z-INDEX
// ================================
export const zIndex = {
  nav: "z-50",
  modal: "z-40",
  dropdown: "z-30",
  tooltip: "z-60",
  banner: "z-20",
  sticky: "z-10",
} as const;

// ================================
// âš™ï¸ ICON SIZES
// ================================
export const icon = {
  sm: "h-4 w-4",
  md: "h-6 w-6",
  lg: "h-12 w-12",
  xl: "h-16 w-16",
} as const;

// ================================
// ðŸ”· REOPS COLOR MAPPING
// ================================
export const reopsColors = {
  governance: "#E8ECF7",
  knowledge: "#EAF7F1",
  participant: "#FFF3E6",
  tools: "#E9F2FF",
  enablement: "#F2F9E8",
  culture: "#F9E8EE",
} as const;

// ================================
// ðŸŽ¨ NOTION HEX COLOR MAP
// ================================
export const notionHexMap = {
  default: { text: "#373530", bg: "#F7F7F7" },
  gray: { text: "#787774", bg: "#F1F1EF" },
  brown: { text: "#976D57", bg: "#F3EEEE" },
  orange: { text: "#CC782F", bg: "#F8ECDF" },
  yellow: { text: "#C29343", bg: "#FAF3DD" },
  green: { text: "#548164", bg: "#EEF3ED" },
  blue: { text: "#487CA5", bg: "#E9F3F7" },
  purple: { text: "#8A67AB", bg: "#F6F3F8" },
  pink: { text: "#B35488", bg: "#F9F2F5" },
  red: { text: "#C4554D", bg: "#FAECEC" },
} as const;

// ================================
// ðŸ“Š CHART TOKEN HELPERS
// ================================
export const chartTokens = {
  fontFamily: "'Inter', 'Helvetica Neue', Arial, sans-serif",
  fontSize: { sm: 12, md: 16, lg: 20, xl: 24 },
  labelColor: notionHexMap.default.text,
  gridColor: "#E5E7EB",
  angleColor: "#E2E8F0",
};



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\lib\utils.ts
==============================

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\home\AboutSection.tsx
==============================

import Section from "@/components/ui/Section";
import Tile from "@/components/ui/Tile";
import FadeIn from "@/components/ui/FadeIn";
import TextReveal from "@/components/ui/TextReveal";
import { Subtitle, Body } from "@/components/ui/Tokens";
import { spacing, shadows, colors, layout } from "@/lib/tokens";
import { cn } from "@/lib/utils";
import profileImg from "@/assets/profile-felix.png";

export default function AboutSection() {
  const metrics = [
    {
      number: "10+",
      title: "Years Experience",
      desc: "UX strategy and research leadership across teams",
    },
    {
      number: "25+",
      title: "Research Methods",
      desc: "Full spectrum of qualitative and quantitative approaches",
    },
    {
      number: "5",
      title: "Industries",
      desc: "Cross-domain expertise from e-commerce to finance",
    },
    {
      number: "200+",
      title: "Studies Conducted",
      desc: "End-to-end research across product development phases",
    },
  ];

  return (
    <Section id="about" title="About Me" center>
      {/* === Portrait === */}
      <div className={cn("flex flex-col items-center w-full", spacing.mt8, spacing.mb20)}>
        <FadeIn>
          <div className="flex justify-center w-full">
            <img
              src={profileImg}
              alt="Portrait of Felix Bruckmeier"
              className={cn(
                "w-[40%] max-w-[200px] md:max-w-[260px] aspect-[4/5] object-cover rounded-2xl shadow-lg mx-auto",
                colors.border,
                shadows.md
              )}
            />
          </div>
        </FadeIn>

        {/* === Animated Intro Text === */}
        <TextReveal
          variant="word"
          delay={0.2}
          className={cn(
            "text-center text-foreground/90 leading-relaxed mt-10 text-lg tracking-wide",
            layout.maxWidthText // âœ… ersetzt max-w-3xl
          )}
        >
          Iâ€™m a UX Research Lead with 10+ years of experience bridging strategy,
          operations, and insight generation. My work combines qualitative depth,
          quantitative validation, and ResearchOps leadership to accelerate confident
          product decisions.
        </TextReveal>
      </div>

      {/* === Key Metrics === */}
      <div
        className={cn(
          "grid grid-cols-2 md:grid-cols-4 w-full",
          spacing.gap6,
          spacing.mt20
        )}
      >
        {metrics.map((m, i) => (
          <FadeIn key={i} delay={0.3 + i * 0.1}>
            <Tile
              variant="static"
              className={cn(
                colors.tile.bg,
                colors.tile.text,
                "text-center border border-border/10",
                spacing.p6,
                shadows.sm,
                "rounded-xl"
              )}
            >
              <Subtitle className="font-bold">{m.number}</Subtitle>
              <Body className="font-semibold text-foreground mt-1">{m.title}</Body>
              <Body className="text-muted-foreground mt-1">{m.desc}</Body>
            </Tile>
          </FadeIn>
        ))}
      </div>

      {/* === Quote === */}
      <FadeIn delay={0.8}>
        <blockquote
          className={cn(
            "italic text-center text-muted-foreground",
            spacing.mt16,
            spacing.mb8,
            layout.maxWidthText
          )}
        >
          â€œGood UX Research isnâ€™t meant to scale â€” itâ€™s meant to reveal what scaling hides.â€
        </blockquote>
      </FadeIn>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\home\ContactSection.tsx
==============================

import Section from "@/components/ui/Section";
import Button from "@/components/ui/Button";
import { useTranslation } from "react-i18next";
import { Calendar } from "lucide-react";
import { spacing, colors, icon, hoverEffects, layout } from "@/lib/tokens";
import { cn } from "@/lib/utils";

export default function ContactSection() {
  const { t } = useTranslation();
  const calendarUrl =
    "https://calendar.google.com/calendar/u/0/appointments/schedules/AcZssZ0oPGXHnWXdq3-zK6GQhHm2ESA4SVlsx5ziYevEBxKE7MXlGBWgUN9yuCUp9TsirOrT9kR459cC";

  const handleClick = () =>
    window.open(calendarUrl, "_blank", "noopener,noreferrer");

  return (
    <Section id="contact" title="Contact">
      <div className={cn(layout.flexColCenter, spacing.gap8, layout.maxWidthText)}>
        {/* === Klickbare Karte === */}
        <div
          onClick={handleClick}
          className={cn(
            "cursor-pointer w-full flex flex-col items-center text-center py-10 rounded-xl",
            hoverEffects.smoothLift,
            colors.tile.bg,
            colors.tile.text
          )}
        >
          {/* --- Rundes Icon --- */}
          <div
            className={cn(
              "flex items-center justify-center aspect-square w-20 rounded-full mb-6",
              colors.notion.blue.bg,
              colors.notion.blue.text
            )}
          >
            <Calendar className={cn(icon.lg)} />
          </div>

          {/* --- Titel & Beschreibung --- */}
          <h3 className="text-xl font-semibold text-foreground">
            {t("contact.title", "Book a Call")}
          </h3>
          <p className="text-muted-foreground mt-2 max-w-sm">
            {t("contact.cta", "Letâ€™s talk about your UX Research challenge.")}
          </p>
        </div>

        {/* === Separater Button === */}
        <Button variant="secondary" size="lg" onClick={handleClick}>
          {t("contact.button", "Open Calendar")}
        </Button>
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\home\ExpertiseSection.tsx
==============================

import { Section } from "@/components/ui";
import SectionIntro from "@/components/ui/SectionIntro";
import FadeIn from "@/components/ui/FadeIn";
import TextReveal from "@/components/ui/TextReveal";
import { useTranslation } from "react-i18next";
import { cn } from "@/lib/utils";
import { spacing, layout } from "@/lib/tokens";
import { Link } from "react-router-dom";
import TileImage from "@/components/ui/TileImage";

// ðŸ–¼ï¸ Expertise-Bilder â€“ korrekte Pfade und Dateinamen
import uxStrategyImg from "@/assets/images/expertise/uxstrategy/schach1.jpg";
import strategicUxImg from "@/assets/images/expertise/strategicuxresearch/strategicuxr.jpg";
import researchOpsImg from "@/assets/images/expertise/researchops/plant.jpg";
import leadershipImg from "@/assets/images/expertise/teamleadership/team.jpg";
import impactImg from "@/assets/images/expertise/impactmeasurement/impact.jpg";

export default function ExpertiseSection() {
  const { t } = useTranslation();

  const pillars =
    (t("expertise.pillars", { returnObjects: true }) as Array<{
      title: string;
      caption?: string;
    }>) ?? [];

  const routesByIndex = [
    "expertise/ux-strategy",
    "expertise/strategic-ux-research",
    "expertise/researchops",
    "expertise/team-leadership",
    "expertise/impact-measurement",
  ];

  const images = [
    uxStrategyImg,
    strategicUxImg,
    researchOpsImg,
    leadershipImg,
    impactImg,
  ];

  return (
    <Section id="expertise" title={t("expertise.title")} spacing="lg">
      {/* --- Intro Text --- */}
      <SectionIntro>
        <TextReveal
          stagger={0.06}
          duration={0.35}
          delay={0.1}
          ease="easeOut"
          className="inherit"
        >
          I help companies build sustainable products by transforming deep user
          insights into actionable strategies. My mission is to scale the user's
          voice and empower organizations to make user-centered decisions.
        </TextReveal>
      </SectionIntro>

      {/* --- Expertise Tiles (2 groÃŸe pro Zeile) --- */}
      <div
        className={cn(
          "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2",
          spacing.gap8,
          layout.fullWidth // âœ… ersetzt max-w-6xl mx-auto
        )}
      >
        {pillars.slice(0, 5).map((p, i) => {
          const to = routesByIndex[i] ?? "expertise";
          const image = images[i];
          return (
            <FadeIn key={i} delay={0.2 + i * 0.1}>
              <Link to={to}>
                <TileImage
                  image={image}
                  title={p.title}
                  caption={p.caption}
                  className="group aspect-[4/3] rounded-xl overflow-hidden"
                />
              </Link>
            </FadeIn>
          );
        })}
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\home\index.ts
==============================

// src/components/sections/home/index.ts

export { default as AboutSection } from "./AboutSection";
export { default as ExpertiseSection } from "./ExpertiseSection";
export { default as ProjectsSection } from "./ProjectsSection";
export { default as ContactSection } from "./ContactSection";




==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\home\ProjectsSection.tsx
==============================

// src/components/sections/home/ProjectsSection.tsx
import { Link } from "react-router-dom";
import { useTranslation } from "react-i18next";
import { Section } from "@/components/ui";
import SectionIntro from "@/components/ui/SectionIntro";
import TextReveal from "@/components/ui/TextReveal";
import FadeIn from "@/components/ui/FadeIn";
import TileImage from "@/components/ui/TileImage";
import { spacing } from "@/lib/tokens";
import { cn } from "@/lib/utils";

// ðŸ“¸ Projektbilder
import carInsuranceImg from "@/assets/images/projects/carinsurance/CarInsurance.png";
import reopsAgileImg from "@/assets/images/projects/reopsagile/ResearchOpsAgileUX.jpg";
import b2b2cImg from "@/assets/images/projects/b2b2c/B2B2COptimization.jpg";
import pricingImg from "@/assets/images/projects/pricingtesting/PricingUsabilityTesting.jpg";
import microinteractionImg from "@/assets/images/projects/amicrointeraction/optimize.jpg";
import reopsImplImg from "@/assets/images/projects/reopsimplement/ReOpsimplementation.jpg";

export default function ProjectsSection() {
  const { t } = useTranslation();

  const projects = [
    {
      to: "/projects/car-insurance",
      title: "Car Insurance",
      desc: "Reduced friction and improved conversion.",
      image: carInsuranceImg,
    },
    {
      to: "/projects/zooplus-reops",
      title: "ResearchOps & Agile UX",
      desc: "Governance, templates & enablement at scale.",
      image: reopsAgileImg,
    },
    {
      to: "/projects/swiss-life-b2b2c",
      title: "B2B2C Optimization",
      desc: "Qual & quant insights aligned to business goals.",
      image: b2b2cImg,
    },
    {
      to: "/projects/zooplus-pricing",
      title: "Pricing Usability Testing",
      desc: "Clarity in pricing components and PDP details.",
      image: pricingImg,
    },
    {
      to: "/projects/delete-case",
      title: "Micro Interaction",
      desc: "Simplifying repetitive workflows efficiently.",
      image: microinteractionImg,
    },
    {
      to: "/projects/atoss-reops",
      title: "ReOps Implementation",
      desc: "Empowering UX teams through ResearchOps foundations.",
      image: reopsImplImg,
    },
  ];

  return (
    <Section id="projects" title={t("projects.title")} spacing="lg">
      <SectionIntro>
        <TextReveal
          stagger={0.06}
          duration={0.35}
          delay={0.1}
          ease="easeOut"
          className="inherit"
        >
          A selection of research and operations projects â€” from foundational
          insights to usability testing and scalable ResearchOps systems.
        </TextReveal>
      </SectionIntro>

      <div
        className={cn(
          "grid grid-cols-1 md:grid-cols-2",
          spacing.gap8,
          "max-w-6xl mx-auto"
        )}
      >
        {projects.map((p, i) => (
          <FadeIn key={i} delay={0.2 + i * 0.1}>
            <Link to={p.to}>
              <TileImage
                image={p.image}
                title={p.title}
                caption={p.desc}
                className="group"
              />
            </Link>
          </FadeIn>
        ))}
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\expertise\uxstrategy\DiscoveryDelivery.tsx
==============================

// src/components/sections/expertise/uxstrategy/DiscoveryDelivery.tsx
import { Section } from "@/components/ui";
import SectionIntro from "@/components/ui/SectionIntro";
import { Tile } from "@/components/ui";
import { Subtitle, Body } from "@/components/ui/Tokens";
import { layout, spacing, colors } from "@/lib/tokens";
import { cn } from "@/lib/utils";
import ResearchInPD from "@/assets/visuals/uxstrategy/ResearchinPD";

/**
 * Section: From Discovery to Delivery
 * Demonstrates how UX Research is embedded across the product development cycle.
 */

export default function DiscoveryDelivery() {
  return (
    <Section id="discovery-delivery" title="From Discovery to Delivery" spacing="lg">
      <SectionIntro>
        UX Research is not a one-time effort but a continuous learning process
        throughout the product lifecycle. As a UX Research Lead, I create systems
        that connect discovery, validation, and optimization â€” enabling teams to
        learn faster and make confident, user-centered decisions.
      </SectionIntro>

      {/* === 3-column Tile Grid === */}
      <div className={cn(layout.gridCols3, spacing.gap6, spacing.mt8)}>
        <Tile variant="static" className={cn(spacing.p6, "h-full text-left")}>
          <Subtitle>Discovery</Subtitle>
          <Body className={colors.muted.text}>
            Exploring user needs, motivations, and market opportunities through
            contextual inquiry and generative research. Insights inform early strategy
            and opportunity framing.
          </Body>
        </Tile>

        <Tile variant="static" className={cn(spacing.p6, "h-full text-left")}>
          <Subtitle>Prototyping</Subtitle>
          <Body className={colors.muted.text}>
            Translating findings into testable concepts. I enable teams to validate
            assumptions quickly and iterate towards solutions that balance impact,
            feasibility, and usability.
          </Body>
        </Tile>

        <Tile variant="static" className={cn(spacing.p6, "h-full text-left")}>
          <Subtitle>Optimize</Subtitle>
          <Body className={colors.muted.text}>
            Embedding measurement and continuous evaluation into the product loop.
            Research evolves from validation to a self-sustaining learning system.
          </Body>
        </Tile>
      </div>

      {/* === Full-width Diagram === */}
      <div
        className={cn(
          "w-full flex justify-center mt-24", // Abstand nach dem Grid
          "px-4 sm:px-6"                     // Responsive Padding
        )}
      >
        <div className="w-full max-w-6xl">
          <ResearchInPD />
        </div>
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\expertise\uxstrategy\index.ts
==============================

export { default as VisionAlignment } from "./VisionAlignment";
export { default as DiscoveryDelivery } from "./DiscoveryDelivery";
export { default as Prioritization } from "./Prioritization";
export { default as ValueOfUXStrategy } from "./ValueOfUXStrategy";




==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\expertise\uxstrategy\Prioritization.tsx
==============================

// src/components/sections/expertise/uxstrategy/Prioritization.tsx
import { Section } from "@/components/ui";
import SectionIntro from "@/components/ui/SectionIntro";
import { Body } from "@/components/ui/Tokens";
import { layout, spacing } from "@/lib/tokens";
import { cn } from "@/lib/utils";

// âœ… nutzt deine vorhandene Matrix-Komponente
import ResearchPrioritizationMatrix from "@/assets/visuals/uxstrategy/ResearchPrioritizationMatrix";

/**
 * Section: UX Research Prioritization
 * Uses the existing 3Ã—3 (or 2Ã—2) matrix visual and aligns explanatory text below it.
 */

export default function Prioritization() {
  return (
    <Section id="research-prioritization" title="UX Research Prioritization" spacing="lg">
      {/* --- Intro text --- */}
      <SectionIntro>
        Not every research question deserves the same depth.  
        Prioritization balances <strong>knowledge about the customer</strong> and  
        <strong>risk of getting it wrong</strong>.
      </SectionIntro>

      {/* --- Centered matrix visual --- */}
      <div className={cn("flex justify-center mt-12 mb-8")}>
        <div className="w-full max-w-4xl flex justify-center">
          <ResearchPrioritizationMatrix />
        </div>
      </div>

      {/* --- Explanatory text (below, left-aligned) --- */}
      <div
        className={cn(
          layout.container,
          "max-w-3xl mx-auto text-left",
          spacing.mt8
        )}
      >
        <Body>
          I apply a <strong>prioritization framework</strong> that maps initiatives 
          along two axes: <em>risk of getting it wrong</em> and 
          <em>knowledge about the user</em>.  
          <br />
          <br />
          <strong>High risk & low knowledge</strong> areas require 
          foundational research to uncover user context and reduce uncertainty.  
          <br />
          <strong>High knowledge & low risk</strong> areas benefit from 
          lightweight validation and optimization.  
          <br />
          <br />
          This approach ensures research investment scales with 
          strategic impact â€” aligning depth of inquiry with 
          decision confidence and business value.
        </Body>
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\expertise\uxstrategy\ValueOfUXStrategy.tsx
==============================

import { Section } from "@/components/ui";
import SectionIntro from "@/components/ui/SectionIntro";
import { Tile } from "@/components/ui";
import { Subtitle, Body } from "@/components/ui/Tokens";
import { layout, spacing } from "@/lib/tokens";
import { cn } from "@/lib/utils";

/**
 * Section: The Value of UX Strategy
 * DS-konform mit zentralem Farbmanagement
 */
export default function ValueOfUXStrategy() {
  return (
    <Section id="value" title="The Value of UX Strategy" spacing="lg" fullWidth>
      {/* --- Storytelling Intro --- */}
      <SectionIntro>
        In todayâ€™s product culture, speed often replaces clarity.
        Teams ship fast â€” but rarely stop to ask whether theyâ€™re moving in the right direction.
        <br />
        <br />
        <strong>UX Strategy</strong> reframes development around learning and alignment instead of
        output â€” helping organizations make decisions with purpose, not just momentum.
        It turns design and research into a shared language for confident, evidence-based progress.
      </SectionIntro>

      {/* --- Value Tiles --- */}
      <div className={cn(layout.gridCols3, spacing.gap6, spacing.mt12)}>
        {[
          {
            title: "Alignment",
            text: "Every strategic decision connects business goals, user needs, and design intent â€” creating shared direction across teams.",
          },
          {
            title: "Impact",
            text: "Insights and frameworks guide priorities at every level â€” ensuring that effort turns into meaningful business and user outcomes.",
          },
          {
            title: "Confidence",
            text: "Stakeholders trust UX because it delivers measurable value and supports decisions with clarity and evidence.",
          },
        ].map((item) => (
          <Tile
            key={item.title}
            variant="static"
            className={cn(
              spacing.p6,
              "flex flex-col justify-start text-left rounded-2xl shadow-sm"
            )}
          >
            {/* Subtitles und Body greifen automatisch auf Tokens zu */}
            <Subtitle className={spacing.mb2}>{item.title}</Subtitle>
            <Body className="leading-relaxed">{item.text}</Body>
          </Tile>
        ))}
      </div>

      {/* --- Closing Quote --- */}
      <div className={cn("text-center", spacing.mt12)}>
        <Subtitle className="italic">
          â€œUX Strategy turns motion into meaning â€” and progress into impact.â€
        </Subtitle>
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\sections\expertise\uxstrategy\VisionAlignment.tsx
==============================

import { Section } from "@/components/ui";
import SectionIntro from "@/components/ui/SectionIntro";
import Tile from "@/components/ui/Tile";
import { Subtitle, Body } from "@/components/ui/Tokens";
import { layout, spacing, colors, shadows } from "@/lib/tokens";
import { cn } from "@/lib/utils";
import VennDiagram from "@/assets/visuals/uxstrategy/VennDiagram";

/**
 * Section: Vision & Alignment
 * DS-conform â€” matches typography, spacing, and tile style across UX pages
 */
export default function VisionAlignment() {
  const tiles = [
    {
      title: "Business Viability",
      text: "Ensuring research outcomes connect directly to measurable business impact â€” translating user understanding into growth and strategic clarity.",
      bg: colors.notion.yellow.bg,
      textColor: colors.notion.yellow.text,
    },
    {
      title: "Technology Feasibility",
      text: "Partnering with engineering early to align desirability with feasibility â€” ensuring that user insights inform technical direction, not react to it.",
      bg: colors.notion.blue.bg,
      textColor: colors.notion.blue.text,
    },
    {
      title: "Human Desirability",
      text: "Grounding all product decisions in empathy, behavior, and cultural context â€” to deliver solutions that feel intuitive, inclusive, and meaningful.",
      bg: colors.notion.pink.bg,
      textColor: colors.notion.pink.text,
    },
  ];

  return (
    <Section id="vision-alignment" title="Vision & Alignment" spacing="lg">
      {/* --- Intro Text --- */}
      <SectionIntro>
        UX sits at the intersection of <strong>business</strong>,{" "}
        <strong>technology</strong>, and <strong>human experience</strong> â€” 
        aligning user needs with strategic goals and technical feasibility.
      </SectionIntro>

      {/* --- Centered Venn Diagram --- */}
      <div
        className={cn(
          "flex justify-center items-center mx-auto w-full",
          spacing.mt12,
          spacing.mb12
        )}
      >
        <div className="w-full max-w-3xl flex justify-center">
          <VennDiagram />
        </div>
      </div>

      {/* --- Supporting Tiles (statisch, DS-konform, mit Farbcode) --- */}
      <div className={cn(layout.gridCols3, spacing.gap6, spacing.mt12)}>
        {tiles.map((item) => (
          <Tile
            key={item.title}
            variant="static"
            className={cn(
              item.bg,
              item.textColor,
              "h-full text-left border border-border/10 rounded-xl",
              spacing.p6,
              shadows.sm
            )}
          >
            <Subtitle className={cn("mb-3 text-foreground")}>{item.title}</Subtitle>
            <Body className={cn(colors.muted.text, "leading-relaxed")}>
              {item.text}
            </Body>
          </Tile>
        ))}
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\artefacts\CVPreview.tsx
==============================

import React, { useMemo, useState } from "react";
import {
  Accordion,
  AccordionItem,
  AccordionContent,
} from "@/components/ui/accordion";
import Button from "@/components/ui/Button";
import Tag from "@/components/ui/Tag";
import Badge from "@/components/ui/Badge";
import { typography, colors, spacing } from "@/lib/tokens";
import { tagColorMap } from "@/lib/tagColors";
import { cn } from "@/lib/utils";
import { Link } from "react-router-dom";

type Role = {
  id: string;
  company: string;
  role: string;
  period: string;
  tags: string[];
  bullets?: string[];
};

const ROLES: Role[] = [
  {
    id: "exp-freelance",
    company: "Freelance",
    role: "UX Research Consultant",
    period: "2023 â€“ present",
    tags: ["Consulting", "B2C", "ResearchOps"],
    bullets: [
      "Optimized UX & analytics for shop flows â†’ better conversion.",
      "User tests/experiments â†’ informed presentation & pricing.",
      "Scaled research cadence (RITE, office hours) â†’ ~30% faster test cycles.",
      "MaxDiff (250+) â†’ data-driven prioritization.",
    ],
  },
  {
    id: "exp-atoss",
    company: "ATOSS Software SE",
    role: "UX Research Lead",
    period: "Jan 2025 â€“ May 2025",
    tags: ["Leadership", "Enterprise", "B2B"],
    bullets: [
      "Established lean research cadence â†’ 70% project coverage.",
      "Conjoint & surveys (>1,000) â†’ feature prioritization.",
      "Partnered with CX/Analytics; mentored cross-functional teams.",
    ],
  },
  {
    id: "exp-zooplus",
    company: "zooplus SE",
    role: "UX Research Lead",
    period: "Jul 2022 â€“ Dec 2024",
    tags: ["Leadership", "E-commerce", "ResearchOps"],
    bullets: [
      "ResearchOps governance, templates & enablement at scale.",
      "Faster insight cycles; higher consistency across studies.",
    ],
  },
  {
    id: "exp-swisslife",
    company: "Swiss Life",
    role: "Senior UX Researcher",
    period: "May 2020 â€“ Jun 2022",
    tags: ["Insurance", "B2B2C", "Quant"],
    bullets: [
      "B2B2C research (SAFe Epic Owner) â†’ informed 3 new features.",
      "Stakeholder workshops; iterative validation (RITE).",
    ],
  },
  {
    id: "exp-kaiserxlabs",
    company: "Kaiser X Labs (Allianz)",
    role: "UX Researcher",
    period: "Aug 2018 â€“ Apr 2020",
    tags: ["Insurance", "Quant", "Experiments"],
    bullets: [
      "Mixed methods (interviews, surveys, MaxDiff) â†’ clear priorities.",
      "Contextual research (e.g., ADAC) â†’ exposed redesign opportunities.",
    ],
  },
];

const allTags = Array.from(new Set(ROLES.flatMap((r) => r.tags))).sort();

export default function CVPreview({ hideCTA = false }: { hideCTA?: boolean }) {
  const [selected, setSelected] = useState<Set<string>>(new Set());
  const [openItems, setOpenItems] = useState<string[]>([]);

  const filtered = useMemo(() => {
    return ROLES.filter(
      (r) =>
        selected.size === 0 ||
        Array.from(selected).some((tag) => r.tags.includes(tag))
    );
  }, [selected]);

  const allIds = filtered.map((r) => r.id);
  const allOpen = openItems.length === allIds.length;

  const toggleTag = (tag: string) => {
    setSelected((prev) => {
      const next = new Set(prev);
      next.has(tag) ? next.delete(tag) : next.add(tag);
      return next;
    });
  };

  const clearFilters = () => setSelected(new Set());
  const handleExpandCollapse = () => setOpenItems(allOpen ? [] : allIds);

  return (
    <div>
      <p
        className={cn(
          spacing.mb6,
          typography.body.font,
          typography.body.size,
          typography.body.leading,
          colors.muted.text
        )}
      >
        Browse my experience by tags
      </p>

      <div
        className={cn(
          spacing.mb6,
          "flex flex-col md:flex-row md:justify-between md:items-start",
          spacing.gap4
        )}
      >
        <div className={cn("flex flex-wrap md:flex-1", spacing.gap2)}>
          {allTags.map((tag) => (
            <Tag
              key={tag}
              active={selected.has(tag)}
              onClick={() => toggleTag(tag)}
              color={tagColorMap[tag] ?? "default"}
            >
              {tag}
            </Tag>
          ))}
        </div>

        <div className={cn("flex flex-col items-end", spacing.gap2)}>
          <Button variant="secondary" size="sm" onClick={handleExpandCollapse}>
            {allOpen ? "Collapse all" : "Expand all"}
          </Button>
          {selected.size > 0 && (
            <Button variant="ghost" size="sm" onClick={clearFilters}>
              Clear
            </Button>
          )}
        </div>
      </div>

      <Accordion
        type="multiple"
        value={openItems}
        onValueChange={(vals) => setOpenItems(vals)}
        className={cn("relative border-l border-border", spacing.pl8, spacing.stackLg)}
      >
        {filtered.map((r) => (
          <AccordionItem
            key={r.id}
            value={r.id}
            variant="timeline"
            title={r.company}
            subtitle={`${r.role} Â· ${r.period}`}
          >
            <AccordionContent>
              {r.bullets && r.bullets.length > 0 && (
                <ul
                  className={cn(
                    spacing.stackSm,
                    "list-disc list-inside",
                    spacing.pl4,
                    typography.body.font,
                    typography.body.size,
                    typography.body.leading,
                    colors.muted.text
                  )}
                >
                  {r.bullets.map((b, j) => (
                    <li key={j}>{b}</li>
                  ))}
                </ul>
              )}
              <div className={cn(spacing.mt3, "flex flex-wrap", spacing.gap2)}>
                {r.tags.map((tag) => (
                  <Badge key={tag} color={tagColorMap[tag] ?? "default"}>
                    {tag}
                  </Badge>
                ))}
              </div>
            </AccordionContent>
          </AccordionItem>
        ))}

        {filtered.length === 0 && (
          <div className={cn(typography.small.size, colors.muted.text)}>
            No results. Try removing some tags.
          </div>
        )}
      </Accordion>

      {!hideCTA && (
        <div className={spacing.pt4}>
          <Button asChild variant="secondary" size="md">
            <Link to="/cv">See full CV</Link>
          </Button>
        </div>
      )}
    </div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\artefacts\DoubleDiamond.tsx
==============================

import React from "react";
import { motion } from "framer-motion";

type Phase = "discover" | "define" | "develop" | "deliver";

type Props = {
  active: Phase;
  /** Optional: kompaktere Darstellung ohne das globale Default zu Ã¤ndern */
  size?: "lg" | "md" | "sm";
};

const PRESETS = {
  lg: {
    bar: "h-20 md:h-32",
    diamond: "w-14 h-14 md:w-20 md:h-20",
    text: "text-xs md:text-sm",
    margin: "my-12 md:my-32",
    px: "px-6 md:px-16",
  },
  md: {
    bar: "h-12 md:h-20",
    diamond: "w-12 h-12 md:w-16 md:h-16",
    text: "text-[11px] md:text-xs",
    margin: "my-10 md:my-24",
    px: "px-6 md:px-12",
  },
  sm: {
    bar: "h-8 md:h-12",
    diamond: "w-10 h-10 md:w-12 md:h-12",
    text: "text-[10px] md:text-[11px]",
    margin: "my-8 md:my-16",
    px: "px-5 md:px-10",
  },
} as const;

export default function DoubleDiamond({ active, size = "lg" }: Props) {
  const phases: { key: Phase; label: string }[] = [
    { key: "discover", label: "Discover" },
    { key: "define", label: "Define" },
    { key: "develop", label: "Develop" },
    { key: "deliver", label: "Deliver" },
  ];

  const preset = PRESETS[size];

  return (
    <div className={`relative w-full ${preset.margin}`}>
      {/* Balken als Trennlinie */}
      <div
        className={`absolute top-1/2 left-0 w-full ${preset.bar} bg-gray-100 rounded-md -translate-y-1/2`}
      />

      {/* Diamonds */}
      <div className={`flex justify-between items-center relative ${preset.px}`}>
        {phases.map((p) => {
          const isActive = active === p.key;
          return (
            <motion.div
              key={p.key}
              className={`${preset.diamond} rotate-45 flex items-center justify-center border-2 shadow-sm rounded-md`}
              animate={{
                backgroundColor: isActive ? "#2563EB" : "#E5E7EB",
                borderColor: isActive ? "#2563EB" : "#D1D5DB",
                scale: isActive ? 1.15 : 1,
              }}
              transition={{
                duration: 0.5,
                delay: isActive ? 0.15 : 0,
                ease: "easeInOut",
                type: "spring",
                stiffness: 200,
                damping: 20,
              }}
            >
              <span
                className={`rotate-[-45deg] font-medium ${
                  isActive ? "text-white" : "text-gray-600"
                } ${preset.text}`}
              >
                {p.label}
              </span>
            </motion.div>
          );
        })}
      </div>
    </div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\artefacts\InsightCard.tsx
==============================

import React from "react";

type InsightProps = {
  title: string;
  evidence: string;
  implication: string;
};

export default function InsightCard({ title, evidence, implication }: InsightProps) {
  return (
    <div className="rounded-2xl border bg-white p-6 shadow-md space-y-4">
      <h4 className="text-lg font-bold text-blue-700">{title}</h4>
      <div>
        <p className="font-semibold text-gray-800">Evidence</p>
        <p className="text-sm text-gray-600">{evidence}</p>
      </div>
      <div>
        <p className="font-semibold text-gray-800">Implication</p>
        <p className="text-sm text-gray-600">{implication}</p>
      </div>
    </div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\artefacts\JourneyMap.tsx
==============================

// src/components/artefacts/JourneyMap.tsx
import React from "react";
import { ResponsiveContainer, LineChart, Line } from "recharts";
import {
  IconRealizeProblem,
  IconWorkaround,
  IconManualDelete,
  IconEmptyField,
} from "@/components/common/ActionIcons";

const stages = [
  {
    key: "realize",
    label: "Realize Problem",
    action: "Bemerkung: Nachricht zu lang",
    icon: <IconRealizeProblem />,
  },
  {
    key: "workaround",
    label: "Workaround suchen",
    action: "User googelt Shortcut oder Hilfe",
    icon: <IconWorkaround />,
  },
  {
    key: "manual",
    label: "Manuell lÃ¶schen",
    action: "Alles markieren & scrollen",
    icon: <IconManualDelete />,
  },
  {
    key: "empty",
    label: "Feld ist leer",
    action: "Neu anfangen zu tippen",
    icon: <IconEmptyField />,
  },
];

// Emotions-Verlauf + Smileys
const emotions = [
  { value: 2, emoji: "ðŸ˜" }, // neutral
  { value: 1, emoji: "ðŸ˜ " }, // negativ
  { value: 1, emoji: "ðŸ˜ " }, // negativ
  { value: 3, emoji: "ðŸ™‚" }, // positiv
];

export default function UserJourneyMap() {
  return (
    <div className="w-full overflow-x-auto border border-border rounded-2xl p-4 bg-background shadow-sm">
      {/* Desktop-Version */}
      <div className="hidden md:block">
        <table className="min-w-full text-sm text-center rounded-2xl overflow-hidden">
          <thead>
            <tr className="bg-muted/40">
              <th className="border border-border p-3 w-32"></th>
              {stages.map((s) => (
                <th key={s.key} className="border border-border p-3 font-semibold">
                  {s.label}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {/* Actions */}
            <tr>
              <td className="border border-border font-medium p-3">Actions</td>
              {stages.map((s) => (
                <td key={s.key} className="border border-border p-3 align-top">
                  {s.icon}
                  <p className="mt-2">{s.action}</p>
                </td>
              ))}
            </tr>

            {/* Emotions */}
            <tr>
              <td className="border border-border font-medium p-3">Emotions</td>
              <td colSpan={stages.length} className="border border-border p-3">
                <div className="h-40 relative">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={emotions.map((e, i) => ({ idx: i, value: e.value }))}>
                      <Line
                        type="monotone"
                        dataKey="value"
                        stroke="#2563EB"
                        strokeWidth={3}
                        dot={{ r: 0 }}
                        isAnimationActive={false}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                  {/* Smileys exakt auf Linie platzieren */}
                  <div className="absolute inset-0 grid grid-cols-4">
                    {emotions.map((e, i) => (
                      <div
                        key={i}
                        className="flex justify-center"
                        style={{
                          transform: `translateY(${(3 - e.value) * 25}px)`,
                        }}
                      >
                        <span className="text-2xl">{e.emoji}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </td>
            </tr>

            {/* Pain Points */}
            <tr>
              <td className="border border-border font-medium p-3">Pain Points</td>
              {stages.map((s, i) => (
                <td key={s.key} className="border border-border p-3 align-top">
                  {i === 0 && "Keine Delete-Funktion sichtbar"}
                  {i === 1 && "Zeitverlust durch Googeln"}
                  {i === 2 && "MÃ¼hsames Scrollen & Markieren"}
                  {i === 3 && "Erneute Eingabe nÃ¶tig"}
                </td>
              ))}
            </tr>

            {/* Opportunities */}
            <tr>
              <td className="border border-border font-medium p-3">Opportunities</td>
              {stages.map((s, i) => (
                <td key={s.key} className="border border-border p-3 align-top">
                  {i === 0 && "FrÃ¼hes Feedback zur TextlÃ¤nge"}
                  {i === 1 && "Hilfestellungen direkt im UI"}
                  {i === 2 && "Besserer Input-Reset-Mechanismus"}
                  {i === 3 && "Motivation fÃ¼r Delete-Button"}
                </td>
              ))}
            </tr>
          </tbody>
        </table>
      </div>

      {/* Mobile-Version */}
      <div className="md:hidden space-y-6">
        {stages.map((s, i) => (
          <div key={s.key} className="border border-border rounded-2xl p-4 space-y-3">
            {/* Nummerierter Kreis + Ãœberschrift */}
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 flex items-center justify-center rounded-full bg-blue-600 text-white font-bold">
                {i + 1}
              </div>
              <h3 className="font-semibold">{s.label}</h3>
            </div>

            <div>
              <p className="font-medium">Actions</p>
              <div className="flex items-center gap-2">
                {s.icon}
                <span>{s.action}</span>
              </div>
            </div>
            <div>
              <p className="font-medium">Emotions</p>
              <span className="text-2xl">{emotions[i].emoji}</span>
            </div>
            <div>
              <p className="font-medium">Pain Points</p>
              <p className="text-sm text-muted-foreground">
                {i === 0 && "Keine Delete-Funktion sichtbar"}
                {i === 1 && "Zeitverlust durch Googeln"}
                {i === 2 && "MÃ¼hsames Scrollen & Markieren"}
                {i === 3 && "Erneute Eingabe nÃ¶tig"}
              </p>
            </div>
            <div>
              <p className="font-medium">Opportunities</p>
              <p className="text-sm text-muted-foreground">
                {i === 0 && "FrÃ¼hes Feedback zur TextlÃ¤nge"}
                {i === 1 && "Hilfestellungen direkt im UI"}
                {i === 2 && "Besserer Input-Reset-Mechanismus"}
                {i === 3 && "Motivation fÃ¼r Delete-Button"}
              </p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\accordion.tsx
==============================

// src/components/ui/accordion.tsx
import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";

import { cn } from "@/lib/utils";
import Tile from "@/components/ui/Tile";
import {
  typography,
  colors,
  radii,
  transitions,
  icon,
  spacing,
} from "@/lib/tokens";
import { Subtitle, Body } from "@/components/ui/Tokens";

const Accordion = AccordionPrimitive.Root;

interface AccordionItemProps
  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {
  variant?: "default" | "tile" | "timeline";
  title?: string;
  subtitle?: string;
}

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  AccordionItemProps
>(({ className, children, variant = "default", title, subtitle, ...props }, ref) => {
  const timelineDot =
    variant === "timeline" ? (
      <span
        className={cn(
          "absolute left-0 top-6 -translate-x-1/2 h-2.5 w-2.5",
          radii.full,
          colors.muted.text
        )}
      />
    ) : null;

  const baseClasses = cn(
    "border-b",
    variant === "timeline" && cn("relative pl-6 border-none"),
    variant === "tile" && "border-none",
    className
  );

  const content = (
    <>
      {title && (
        <AccordionTrigger className={cn("flex flex-col items-start w-full gap-2")}>
          <Subtitle>{title}</Subtitle>
          {subtitle && <Body className={colors.muted.text}>{subtitle}</Body>}
        </AccordionTrigger>
      )}
      {children}
    </>
  );

  return (
    <AccordionPrimitive.Item ref={ref} className={baseClasses} {...props}>
      {timelineDot}
      {variant === "default" ? (
        content
      ) : (
        <Tile
          className={cn(
            "w-full text-left border-none",
            colors.tile.bg,   // âœ… Designsystem-Hintergrundgrau
            colors.tile.text  // âœ… Designsystem-Textfarbe
          )}
        >
          {content}
        </Tile>
      )}
    </AccordionPrimitive.Item>
  );
});
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex w-full">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between text-left [&[data-state=open]>svg]:rotate-180]",
        spacing.py4,
        transitions.default,
        typography.small.font,
        typography.small.size,
        typography.small.weight,
        typography.small.leading,
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown
        className={cn(
          icon.md,
          "shrink-0 transition-transform duration-200",
          colors.muted.text
        )}
      />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      "overflow-hidden data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    )}
    {...props}
  >
    <Body className={cn(spacing.pb4, "pt-0 text-left", className)}>{children}</Body>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\Badge.tsx
==============================

// src/components/ui/Badge.tsx
import { HTMLAttributes } from "react";
import { cn } from "@/lib/utils";
import { colors, radii, transitions, type NotionColor } from "@/lib/tokens";
import { TagText } from "@/components/ui/Tokens";

interface BadgeProps extends Omit<HTMLAttributes<HTMLSpanElement>, "color"> {
  variant?: "default" | "active";
  color?: NotionColor;
}

export default function Badge({
  variant = "default",
  color = "default",
  className,
  children,
  ...props
}: BadgeProps) {
  const set = colors.notion[color] ?? colors.notion.default;

  return (
    <span
      className={cn(
        "inline-flex items-center px-3 py-1.5",
        set.bg,
        set.text,
        radii.full,
        transitions.opacity,
        variant === "active" &&
          "outline outline-2 outline-offset-2 outline-current",
        className
      )}
      {...props}
    >
      <TagText>{children}</TagText>
    </span>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\Button.tsx
==============================

import { cn } from "@/lib/utils";
import { ButtonHTMLAttributes } from "react";
import { Link } from "react-router-dom";
import { buttonVariants, buttonSizes, typography } from "@/lib/tokens";

/**
 * Universelle Button-Komponente.
 * - `variant`: primary, secondary, ghost, ...
 * - `size`: sm, md, lg
 * - `asChild`: fÃ¼r Links (intern/extern)
 * - `to`: interner Pfad (#hash oder /route)
 * - `href`: externer oder statischer Link (z. B. https://... oder /downloads/...)
 * - `download`: Dateiname fÃ¼r Downloads
 */
interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: keyof typeof buttonVariants;
  size?: keyof typeof buttonSizes;
  asChild?: boolean;
  to?: string;
  href?: string;
  download?: string;
}

export default function Button({
  variant = "primary",
  size = "md",
  className,
  asChild = false,
  to,
  href,
  download,
  children,
  ...props
}: ButtonProps) {
  const baseClasses = cn(
    buttonVariants.base,
    buttonVariants[variant],
    buttonSizes[size],
    typography.button.font,
    typography.button.weight,
    typography.button.leading,
    className
  );

  // ðŸ”¹ Externe oder statische Links (z. B. /downloads/CV.pdf)
  if (href) {
    const isExternal = href.startsWith("http");
    return (
      <a
        href={href}
        {...(download ? { download } : {})} // âœ… download-Attribut weitergeben
        target={isExternal ? "_blank" : undefined}
        rel={isExternal ? "noopener noreferrer" : undefined}
        className={baseClasses}
      >
        {children}
      </a>
    );
  }

  // ðŸ”¹ Interne Links (Router oder Hash)
  if (asChild && to) {
    if (to.startsWith("#")) {
      return (
        <a href={to} className={baseClasses}>
          {children}
        </a>
      );
    }
    return (
      <Link to={to} className={baseClasses}>
        {children}
      </Link>
    );
  }

  // ðŸ”¹ Default â†’ echter Button
  return (
    <button type="button" className={baseClasses} {...props}>
      {children}
    </button>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\FadeIn.tsx
==============================

// src/components/ui/FadeIn.tsx
import { motion, useAnimation } from "framer-motion";
import { useInView } from "react-intersection-observer";
import { useEffect } from "react";

export default function FadeIn({ children, delay = 0 }: { children: React.ReactNode; delay?: number }) {
  const controls = useAnimation();
  const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.1 });

  useEffect(() => {
    if (inView) controls.start("visible");
  }, [controls, inView]);

  return (
    <motion.div
      ref={ref}
      initial="hidden"
      animate={controls}
      variants={{
        hidden: { opacity: 0, y: 20 },
        visible: { opacity: 1, y: 0, transition: { duration: 0.6, delay } },
      }}
    >
      {children}
    </motion.div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\index.ts
==============================

export { default as Section } from "./Section";
export { default as Tile } from "./Tile";
export { default as Button } from "./Button";
export { default as Badge } from "./Badge";
export { default as Tag } from "./Tag";

// Toggle ist ein named export, kein default
export { Toggle } from "./Toggle";

// Accordion hat mehrere named exports
export {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from "./accordion";

// Typography, Color & Spacing Tokens (H1, Body, Subtitle, etc.)
export * from "./Tokens";



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\InfoTile.tsx
==============================

// src/components/ui/InfoTile.tsx
import { ReactNode } from "react";
import Tile from "@/components/ui/Tile";
import { Subtitle, Body } from "@/components/ui/Tokens";
import { cn } from "@/lib/utils";
import { colors, layout, spacing, radii } from "@/lib/tokens";
import { Link } from "react-router-dom";

type InfoTileProps = {
  title: string;
  description: string;
  icon?: ReactNode;
  image?: string;
  link?: string;
  className?: string;
};

export default function InfoTile({
  title,
  description,
  icon,
  image,
  link,
  className,
}: InfoTileProps) {
  const content = (
    <Tile
      className={cn(
        "cursor-pointer",
        layout.flexCol,
        layout.itemsStart,
        layout.textLeft,
        spacing.gap4,
        layout.fullHeight,
        className
      )}
    >
      {icon && (
        <div className={cn(spacing.p3, radii.full, colors.accent.bg)}>{icon}</div>
      )}
      {image && (
        <img
          src={image}
          alt={title}
          className={cn(layout.imageCover, radii.lg)}
        />
      )}

      <Subtitle>{title}</Subtitle>
      <Body className={colors.muted.text}>{description}</Body>
    </Tile>
  );

  if (link) {
    if (link.startsWith("http")) {
      return (
        <a href={link} target="_blank" rel="noopener" className={layout.block}>
          {content}
        </a>
      );
    }
    return (
      <Link to={link} className={layout.block}>
        {content}
      </Link>
    );
  }

  return content;
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\ResearchGridBackground.tsx
==============================

// src/components/ui/ResearchGridBackground.tsx
import { cn } from "@/lib/utils";
import { colors } from "@/lib/tokens";

interface ResearchGridBackgroundProps {
  className?: string;
}

export default function ResearchGridBackground({ className }: ResearchGridBackgroundProps) {
  return (
    <div
      className={cn(
        "absolute inset-0 -z-10",
        colors.tile.bg,   // âœ… nutzt jetzt das einheitliche Tile-Background
        className
      )}
    />
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\Section.tsx
==============================

// src/components/ui/Section.tsx
import { ReactNode } from "react";
import { cn } from "@/lib/utils";
import {
  sectionSpacing,
  sectionInnerSpacing,
  typography,
  colors,
} from "@/lib/tokens";

/**
 * ðŸ’  Section Component
 * -----------------------------------------------------
 * Einheitliche Breite & RÃ¤nder fÃ¼r alle Inhaltsbereiche
 * Dynamisch (ca. 94 vw, max. 1900 px)
 * Headerbilder in PageLayout bleiben unberÃ¼hrt
 */

interface SectionProps {
  id?: string;
  title?: string;
  subtitle?: string;
  children: ReactNode;
  center?: boolean;
  borderTop?: boolean;
  borderBottom?: boolean;
  border?: boolean;
  compact?: boolean;
  spacing?: keyof typeof sectionSpacing;
  className?: string;
  fullWidth?: boolean;
}

export default function Section({
  id,
  title,
  subtitle,
  children,
  center = false,
  borderTop = false,
  borderBottom = false,
  border = false,
  compact = false,
  spacing = "md",
  className,
  fullWidth = false,
}: SectionProps) {
  // âœ… Dynamische Container-Breite, identisch zu Navbar/Footer
  const containerClass = fullWidth
    ? "w-full"
    : "mx-auto w-full max-w-[1900px] px-[3vw]";

  return (
    <section
      id={id}
      className={cn(
        borderTop && "border-t border-border/20",
        borderBottom && "border-b border-border/20",
        border && "border-y border-border/20",
        sectionSpacing[spacing],
        compact && "py-4",
        "w-full",
        className
      )}
    >
      <div className={cn(containerClass, center && "text-center")}>
        {title && (
          <h2
            className={cn(
              typography.sectionTitle.font,
              typography.sectionTitle.size,
              typography.sectionTitle.weight,
              typography.sectionTitle.tracking,
              typography.sectionTitle.leading,
              sectionInnerSpacing.titleMargin
            )}
          >
            {title}
          </h2>
        )}

        {subtitle && (
          <p
            className={cn(
              typography.subtitle.font,
              typography.subtitle.size,
              typography.subtitle.weight,
              typography.subtitle.leading,
              typography.subtitle.color,
              sectionInnerSpacing.subtitleMargin,
              center && "mx-auto"
            )}
          >
            {subtitle}
          </p>
        )}

        <div className="w-full">{children}</div>
      </div>
    </section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\SectionIntro.tsx
==============================

// src/components/ui/SectionIntro.tsx
import { ReactNode } from "react";
import { cn } from "@/lib/utils";
import {
  typography,
  colors,
  sectionIntro,
  sectionInnerSpacing,
  spacing,
} from "@/lib/tokens";

interface SectionIntroProps {
  children: ReactNode;
  center?: boolean;
  maxWidth?: "default" | "full";
  className?: string;
  full?: boolean; // âœ… hinzugefÃ¼gt, um Build-Error zu beheben
}

/**
 * SectionIntro
 * -------------
 * Einheitliche Typografie & Breite fÃ¼r alle Intro-Texte.
 * - BÃ¼ndig mit Section-Titel (Padding kommt aus Section.tsx)
 * - Standardbreite: 75 % des Containers (max-w-4xl)
 * - Optional: `full` erzwingt volle Breite (setzt maxWidth auf "full")
 */
export default function SectionIntro({
  children,
  center = false,
  maxWidth = "default",
  className,
  full = false, // âœ… neues optionales Prop
}: SectionIntroProps) {
  const effectiveWidth = full ? "full" : maxWidth;

  return (
    <div
      className={cn(
        sectionIntro[effectiveWidth], // max-w-4xl oder volle Breite
        typography.body.font,
        typography.body.size,
        typography.body.leading,
        colors.foreground,
        spacing.mb8,
        sectionInnerSpacing.subtitleMargin,
        center && "text-center mx-auto",
        className
      )}
    >
      {children}
    </div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\Tag.tsx
==============================

// src/components/ui/Tag.tsx
import { ButtonHTMLAttributes } from "react";
import { cn } from "@/lib/utils";
import { colors, radii, transitions, type NotionColor } from "@/lib/tokens";
import { TagText } from "@/components/ui/Tokens";

interface TagProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  active?: boolean;
  color?: NotionColor;
}

export default function Tag({
  active = false,
  color = "default",
  className,
  children,
  ...props
}: TagProps) {
  const set = colors.notion[color] ?? colors.notion.default;

  return (
    <button
      type="button"
      className={cn(
        "inline-flex items-center px-3 py-1.5",
        set.bg,
        set.text,
        radii.full,
        transitions.opacity,
        active
          ? "outline outline-2 outline-offset-2 outline-current"
          : "hover:opacity-80",
        className
      )}
      {...props}
    >
      <TagText>{children}</TagText>
    </button>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\TextReveal.tsx
==============================

// src/components/ui/TextReveal.tsx
import { motion, useAnimation } from "framer-motion";
import { useInView } from "react-intersection-observer";
import { useEffect } from "react";
import { cn } from "@/lib/utils";

type TextRevealProps = {
  children: string;
  delay?: number;
  variant?: "word"; // fest auf Wortweise
  stagger?: number; // â± Abstand zwischen WÃ¶rtern
  duration?: number; // â± Dauer pro Wort
  ease?: "linear" | "easeOut" | "easeInOut"; // ðŸŽ¨ Art der Bewegung
  className?: string;
};

export default function TextReveal({
  children,
  delay = 0,
  variant = "word",
  stagger = 0.04,
  duration = 0.3,
  ease = "easeOut",
  className,
}: TextRevealProps) {
  const controls = useAnimation();
  const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.1 });

  useEffect(() => {
    if (inView) controls.start("visible");
  }, [controls, inView]);

  // Text in WÃ¶rter (inkl. Leerzeichen) aufteilen
  const textParts = children.split(/(\s+)/);

  // Container-Animation
  const container = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        delay,
        staggerChildren: stagger,
      },
    },
  };

  // Einzelne WÃ¶rter
  const child = {
    hidden: { opacity: 0, x: 8 },
    visible: {
      opacity: 1,
      x: 0,
      transition: { duration, ease },
    },
  };

  return (
    <motion.div
      ref={ref}
      variants={container}
      initial="hidden"
      animate={controls}
      className={cn("inline-block leading-relaxed", className)}
    >
      {textParts.map((part, i) => (
        <motion.span
          key={i}
          variants={child}
          style={{
            display: "inline-block",
            whiteSpace: "pre",
          }}
        >
          {part}
        </motion.span>
      ))}
    </motion.div>
  );
}




==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\Tile.tsx
==============================

import { cn } from "@/lib/utils";
import { colors, radii, transitions, spacing, hoverEffects } from "@/lib/tokens";
import { ArrowRight } from "lucide-react";

type TileProps = React.HTMLAttributes<HTMLDivElement> & {
  variant?: "interactive" | "interactiveArrow" | "static" | "inactive";
};

export default function Tile({
  variant = "interactive",
  className,
  children,
  ...props
}: TileProps) {
  // gemeinsame Basisstile
  const baseStyles = cn(
    colors.tile.bg,
    colors.tile.text,
    radii.lg,
    spacing.p6,
    transitions.default,
    "relative flex flex-col justify-between h-full text-left space-y-2",
    className
  );

  // Variantenlogik
  const variantStyles =
    variant === "interactive"
      ? cn("will-change-transform cursor-pointer group", hoverEffects.smoothLift)
      : variant === "interactiveArrow"
      ? cn("will-change-transform cursor-pointer group", hoverEffects.smoothLift)
      : variant === "inactive"
      ? cn("opacity-70 cursor-not-allowed transition-none transform-none")
      : cn("cursor-default transition-none transform-none");

  return (
    <div className={cn(baseStyles, variantStyles)} {...props}>
      {/* --- Tile-Inhalt --- */}
      <div className="flex-1">{children}</div>

      {/* --- Nur bei Variante "interactiveArrow" Pfeil anzeigen --- */}
      {variant === "interactiveArrow" && (
        <div className="mt-4 flex justify-end">
          <div
            className="flex h-9 w-9 items-center justify-center rounded-full 
                       bg-primary/10 text-primary dark:text-primary-foreground
                       transition-transform duration-200 
                       group-hover:translate-x-1 group-active:translate-x-1"
          >
            <ArrowRight className="h-5 w-5" strokeWidth={2} />
          </div>
        </div>
      )}
    </div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\TileImage.tsx
==============================

// src/components/ui/TileImage.tsx
import { cn } from "@/lib/utils";
import { transitions, hoverEffects } from "@/lib/tokens";

type TileImageProps = React.HTMLAttributes<HTMLDivElement> & {
  image: string; // Pfad zum Hintergrundbild
  title?: string;
  caption?: string;
  variant?: "default" | "hoverLift";
};

export default function TileImage({
  image,
  title,
  caption,
  variant = "hoverLift",
  className,
  ...props
}: TileImageProps) {
  return (
    <div
      className={cn(
        "relative aspect-square overflow-hidden rounded-2xl text-white",
        transitions.default,
        variant === "hoverLift" && hoverEffects.smoothLift,
        className
      )}
      {...props}
    >
      {/* === Hintergrundbild === */}
      <img
        src={image}
        alt={title || ""}
        className="absolute inset-0 w-full h-full object-cover object-center"
      />

      {/* === Overlay === */}
      <div className="absolute inset-0 bg-black/40 transition-opacity duration-300 group-hover:bg-black/50" />

      {/* === Text-Inhalt === */}
      <div className="relative z-10 flex flex-col justify-start h-full p-4">
        {title && (
          <h3 className="text-xl font-semibold mb-2 drop-shadow-md">
            {title}
          </h3>
        )}
        {caption && (
          <p className="text-base text-gray-200 drop-shadow-md leading-snug">
            {caption}
          </p>
        )}
      </div>
    </div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\Toggle.tsx
==============================

// src/components/ui/Toggle.tsx
import { ButtonHTMLAttributes } from "react";
import clsx from "clsx";
import { Small } from "@/components/ui/Tokens";

interface ToggleProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  pressed?: boolean;
}

export function Toggle({ pressed, className, children, ...props }: ToggleProps) {
  return (
    <button
      aria-pressed={pressed}
      className={clsx(
        "px-3 py-1.5 rounded-lg transition",
        pressed
          ? "bg-neutral-900 text-white dark:bg-white dark:text-neutral-900"
          : "border border-border hover:bg-muted/40",
        className
      )}
      {...props}
    >
      <Small>{children}</Small>
    </button>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\ui\Tokens.tsx
==============================

// src/components/ui/Tokens.tsx
import { cn } from "@/lib/utils";
import {
  typography,
  colors,
  radii,
  transitions,
  spacing,
  sectionIntro,
  buttonVariants,
} from "@/lib/tokens";
import { ReactNode } from "react";

/**
 * TYPOGRAPHY
 */
export function H1({ children, className = "" }: { children: ReactNode; className?: string }) {
  return (
    <h1
      className={cn(
        typography.hero.font,
        typography.hero.size,
        typography.hero.weight,
        typography.hero.tracking,
        typography.hero.leading,
        className
      )}
    >
      {children}
    </h1>
  );
}

export function H2({ children, className = "" }: { children: ReactNode; className?: string }) {
  return (
    <h2
      className={cn(
        typography.sectionTitle.font,
        typography.sectionTitle.size,
        typography.sectionTitle.weight,
        typography.sectionTitle.tracking,
        typography.sectionTitle.leading,
        className
      )}
    >
      {children}
    </h2>
  );
}

// âœ… H3 jetzt automatisch mit subtitle.color (muted)
export function H3({ children, className = "" }: { children: ReactNode; className?: string }) {
  return (
    <h3
      className={cn(
        typography.subtitle.font,
        typography.subtitle.size,
        typography.subtitle.weight,
        typography.subtitle.leading,
        typography.subtitle.color,
        className
      )}
    >
      {children}
    </h3>
  );
}

export function Body({ children, className = "" }: { children: ReactNode; className?: string }) {
  return (
    <p
      className={cn(
        typography.body.font,
        typography.body.size,
        typography.body.weight,
        typography.body.leading,
        className
      )}
    >
      {children}
    </p>
  );
}

export function Small({ children, className = "" }: { children: ReactNode; className?: string }) {
  return (
    <small
      className={cn(
        typography.small.font,
        typography.small.size,
        typography.small.weight,
        typography.small.leading,
        typography.small.color,
        className
      )}
    >
      {children}
    </small>
  );
}

export function Subtitle({ children, className = "" }: { children: ReactNode; className?: string }) {
  return (
    <h4
      className={cn(
        typography.subtitle.font,
        typography.subtitle.size,
        typography.subtitle.weight,
        typography.subtitle.leading,
        typography.subtitle.color,
        className
      )}
    >
      {children}
    </h4>
  );
}

/**
 * INTRO TEXT
 */
export function IntroText({
  children,
  className = "",
  full = false,
}: {
  children: ReactNode;
  className?: string;
  full?: boolean;
}) {
  return (
    <p
      className={cn(
        typography.body.font,
        typography.body.size,
        typography.body.weight,
        typography.body.leading,
        colors.muted.text,
        full ? sectionIntro.full : sectionIntro.default,
        spacing.mb6,
        className
      )}
    >
      {children}
    </p>
  );
}

/**
 * COLORS
 */
export function BgPrimary({ children, className = "" }: { children: ReactNode; className?: string }) {
  return <div className={cn(colors.primary.bg, colors.primary.text, className)}>{children}</div>;
}

export function BgSecondary({ children, className = "" }: { children: ReactNode; className?: string }) {
  return <div className={cn(colors.secondary.bg, colors.secondary.text, className)}>{children}</div>;
}

export function BgAccent({ children, className = "" }: { children: ReactNode; className?: string }) {
  return <div className={cn(colors.accent.bg, colors.accent.text, className)}>{children}</div>;
}

/**
 * âœ… MutedText jetzt mit title-Prop (Fix fÃ¼r SkillmapForm)
 */
export function MutedText({
  children,
  className = "",
  title,
}: {
  children: ReactNode;
  className?: string;
  title?: string;
}) {
  return (
    <span className={cn(colors.muted.text, className)} title={title}>
      {children}
    </span>
  );
}

export function TagText({ children, className = "" }: { children: ReactNode; className?: string }) {
  return (
    <span
      className={cn(
        typography.tag.font,
        typography.tag.size,
        typography.tag.weight,
        typography.tag.leading,
        className
      )}
    >
      {children}
    </span>
  );
}

/**
 * BUTTONS
 */
export function ButtonBase({ children, className = "" }: { children: ReactNode; className?: string }) {
  return <button className={cn(buttonVariants.base, className)}>{children}</button>;
}

export function ButtonPrimary({ children, className = "" }: { children: ReactNode; className?: string }) {
  return <button className={cn(buttonVariants.base, buttonVariants.primary, className)}>{children}</button>;
}

export function ButtonSecondary({ children, className = "" }: { children: ReactNode; className?: string }) {
  return <button className={cn(buttonVariants.base, buttonVariants.secondary, className)}>{children}</button>;
}

export function ButtonGhost({ children, className = "" }: { children: ReactNode; className?: string }) {
  return <button className={cn(buttonVariants.base, buttonVariants.ghost, className)}>{children}</button>;
}

/**
 * CARDS / CONTAINERS
 */
export function Card({ children, className = "" }: { children: ReactNode; className?: string }) {
  return <div className={cn(radii.lg, className)}>{children}</div>;
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\locales\de.json
==============================

{
  "nav": {
    "about": "Ãœber mich",
    "expertise": "Expertise",
    "projects": "Projekte",
    "cv": "Lebenslauf",
    "craft": "Handwerk",
    "contact": "Kontakt"
  },
  "hero": {
    "claim": "UX Research Leadership mit Fokus auf Strategie, ResearchOps & Wirkungsmessung",
    "intro": "Ich leite Research-Teams, skaliere ResearchOps und verankere die Nutzer:innen-Perspektive in der Produktstrategie. Mein Fokus: Entscheidungen beschleunigen, Wirkung belegen und nachhaltige Produkte gestalten."
  },
  "about": {
    "title": "Ãœber mich",
    "text": "UX Research Leader mit Hintergrund in Ã–konometrie & Produktentwicklung. Ich verbinde Qual & Quant, reduziere Risiko und verankere die Nutzer:innen-Perspektive in der Produktstrategie."
  },
  "expertise": {
    "title": "Expertise",
    "roof": "Nachhaltige Produkte",
    "foundation": "Nutzerzentrierte WertschÃ¶pfung",
    "valueProp": "Ich helfe Unternehmen, nachhaltige Produkte zu entwickeln, indem ich tiefe Nutzer:innen-Insights in umsetzbare Strategien Ã¼berfÃ¼hre. Mein Ziel: Die Stimme der Nutzer:innen skalieren und Organisationen befÃ¤higen, nutzerzentrierte Entscheidungen zu treffen.",
    "pillars": [
      {
        "title": "Research Strategy",
        "caption": "Discovery-Programme an Business-Zielen ausrichten"
      },
      {
        "title": "Needs â†’ Product Strategy",
        "caption": "Insights in Roadmaps Ã¼bersetzen"
      },
      {
        "title": "Process & Tooling",
        "caption": "Effiziente, skalierbare Praxis"
      },
      {
        "title": "Team Leadership",
        "caption": "Mentoring, Standards, Exzellenz"
      },
      {
        "title": "Proving ROI",
        "caption": "Wirkung messen & kommunizieren"
      }
    ],
    "uxStrategy": "UX Strategy",
    "strategicUxResearch": "Strategic UX Research",
    "researchOps": "ResearchOps",
    "teamLeadership": "Leadership & Mentoring",
    "impactMeasurement": "Impact Measurement"
  },
  "projects": {
    "title": "Projekte",

    "carInsurance": {
      "title": "Kfz-Versicherung",
      "desc": "Weniger Reibung, bessere Conversion."
    },
    "reopsAgileUX": {
      "title": "ResearchOps & Agile UX",
      "desc": "Governance, Templates & Enablement auf Skalierungsebene."
    },
    "b2b2c": {
      "title": "B2B2C-Optimierung",
      "desc": "Qualitative & quantitative Insights an GeschÃ¤ftszielen ausgerichtet."
    },
    "pricing": {
      "title": "Pricing Usability Testing",
      "desc": "Klarheit in Preis-Komponenten und PDP-Details."
    },
    "deleteCase": {
      "title": "Eine Mikrointeraktion, die viel Nutzerzeit spart",
      "desc": "Vereinfachung wiederkehrender Workflows durch UX."
    },
    "atossReops": {
      "title": "ReOps-Implementierung",
      "desc": "UX-Teams durch ResearchOps-Grundlagen befÃ¤higen."
    }
  },
  "cv": {
    "title": "Lebenslauf",
    "teaserTitle": "Kurzprofil & Stationen",
    "teaserList": [
      "Lead/Director UX Research â€“ Enterprise & B2C",
      "ResearchOps Aufbau & Skalierung",
      "OKR-verbundene Research-Roadmaps",
      "Coaching & Enablement fÃ¼r Produktteams"
    ],
    "btn": "Zur CV-Seite",
    "pageIntro": "VollstÃ¤ndiger Lebenslauf (als PDF eingebettet).",
    "pdfAlt": "CV PDF"
  },
  "craft": {
    "title": "Handwerk",
    "text": "Research als Handwerk: wiederholbar, verbesserbar, mit hohen QualitÃ¤tsstandards."
  },
  "contact": {
    "title": "Kontakt",
    "cta": "ðŸ“ž Kontaktiere mich â€“ ich freue mich auf deine Herausforderungen...",
    "cta2": "Jetzt Termin buchen â€“ Discovery Call vereinbaren",
    "cta3": "Buche ganz einfach einen 60-minÃ¼tigen Termin direkt in meinem Kalender."
  }
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\locales\en.json
==============================

{
  "nav": {
    "about": "About",
    "expertise": "Expertise",
    "projects": "Projects",
    "cv": "CV",
    "craft": "Craft",
    "contact": "Contact"
  },
  "hero": {
    "claim": "UX Research Leadership with focus on Strategy, ResearchOps & Impact Measurement",
    "intro": "I lead research teams, scale ResearchOps, and embed the user perspective into product strategy. My focus: accelerating decisions, proving impact, and building sustainable products."
  },
  "about": {
    "title": "About",
    "text": "UX Research leader with a background in econometrics and product development. I combine qual & quant to de-risk decisions and embed the user's voice into product strategy."
  },
  "expertise": {
    "title": "Expertise",
    "roof": "Sustainable Products",
    "foundation": "User-Centered Value Creation",
    "valueProp": "I help companies build sustainable products by transforming deep user insights into actionable strategies. My mission is to scale the user's voice and empower organizations to make user-centered decisions.",
    "pillars": [
      {
      "title": "UX Strategy",
      "caption": "I align UX Research insights with business direction."
    },
    {
      "title": "Strategic UX Research",
      "caption": "I translate real user needs into actionable product roadmaps."
    },
    {
      "title": "ResearchOps",
      "caption": "I build efficient, scalable, and insight-driven research operations."
    },
    {
      "title": "Leadership & Mentoring",
      "caption": "I empower teams through mentorship, alignment, and excellence in craft."
    },
    {
      "title": "Impact Measurement",
      "caption": "I measure and communicate UX impact across the organization."
    }
    ],
    "uxStrategy": "UX Strategy",
    "strategicUxResearch": "Strategic UX Research",
    "researchOps": "ResearchOps",
    "teamLeadership": "Leadership & Mentoring",
    "impactMeasurement": "Impact Measurement"
  },
  "projects": {
    "title": "Projects",

    "carInsurance": {
      "title": "Car Insurance",
      "desc": "Reduced friction and improved conversion."
    },
    "reopsAgileUX": {
      "title": "ResearchOps & Agile UX",
      "desc": "Governance, templates & enablement at scale."
    },
    "b2b2c": {
      "title": "B2B2C Optimization",
      "desc": "Qual & quant insights aligned to business goals."
    },
    "pricing": {
      "title": "Pricing Usability Testing",
      "desc": "Clarity in pricing components and PDP details."
    },
    "deleteCase": {
      "title": "A micro interaction that saves lots of user time",
      "desc": "Simplifying repetitive workflows efficiently."
    },
    "atossReops": {
      "title": "ReOps Implementation",
      "desc": "Empowering UX teams through ResearchOps foundations."
    }
  },
  "cv": {
    "title": "CV",
    "teaserTitle": "Snapshot & Roles",
    "teaserList": [
      "Lead/Director UX Research â€“ Enterprise & B2C",
      "ResearchOps setup & scaling",
      "OKR-linked research roadmaps",
      "Coaching & enablement for product teams"
    ],
    "btn": "Go to CV page",
    "pageIntro": "Full rÃ©sumÃ© (embedded PDF).",
    "pdfAlt": "CV PDF"
  },
  "craft": {
    "title": "Craft",
    "text": "Research as craft: repeatable, improvable practice with strong quality standards."
  },
  "contact": {
    "title": "Book a Call",
    "cta": "Letâ€™s talk about your UX research challenges.",
    "cta2": "Book Your Call Now â€” Schedule a Discovery Call",
    "cta3": "Click to easily book a 60-minute call directly in my calendar."
  }
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\layout\PageLayout.tsx
==============================

import { ReactNode } from "react";
import { cn } from "@/lib/utils";
import { layout, sectionSpacing, typography } from "@/lib/tokens";

interface PageLayoutProps {
  title?: string;
  intro?: string;
  headerImage?: string;
  children: ReactNode;
  width?: "narrow" | "default" | "wide"; // ðŸ”¹ Breitenoption
}

export default function PageLayout({
  title,
  intro,
  headerImage,
  children,
  width = "default",
}: PageLayoutProps) {
  // Dynamische Breitensteuerung Ã¼ber Tokens
  const containerClass =
    width === "narrow"
      ? layout.containerNarrow
      : width === "wide"
      ? layout.containerWide
      : layout.containerDefault;

  return (
    <main className="flex flex-col items-stretch text-left">
      {/* ===== HERO ===== */}
      {headerImage && (
        <section className="relative w-full flex flex-col justify-center items-center text-center text-white overflow-hidden min-h-[50vh]">
          <img
            src={headerImage}
            alt=""
            className="absolute inset-0 w-full h-full object-cover object-center"
          />
          <div className="absolute inset-0 bg-black/50" />

          <div className="relative z-10 max-w-3xl px-6">
            {title && (
              <h1
                className={cn(
                  typography.hero.font,
                  typography.hero.size,
                  typography.hero.weight,
                  typography.hero.leading,
                  "text-white drop-shadow-lg"
                )}
              >
                {title}
              </h1>
            )}

            {intro && (
              <p
                className={cn(
                  typography.body.font,
                  typography.body.size,
                  "mt-6 text-gray-200 leading-relaxed drop-shadow-md"
                )}
              >
                {intro}
              </p>
            )}
          </div>
        </section>
      )}

      {/* ===== CONTENT ===== */}
      <div className={cn(containerClass, sectionSpacing.lg, "space-y-32")}>
        {children}
      </div>
    </main>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\common\ActionIcons.tsx
==============================

// src/components/ui/ActionIcons.tsx
import React from "react";
import { colors } from "@/lib/tokens";
import { cn } from "@/lib/utils";

interface IconProps {
  width?: number;
  height?: number;
  className?: string;
}

interface BadgeIconProps extends IconProps {
  badgeColor?: "success" | "danger" | "accent";
  badgeText?: string;
}

export function IconRealizeProblem({ width = 80, height = 60, className, badgeColor = "danger", badgeText = "!" }: BadgeIconProps) {
  const fill = badgeColor === "danger" ? colors.notion.red.bg : colors.notion.green.bg;
  return (
    <div className={cn("flex justify-center", className)}>
      <svg width={width} height={height} viewBox="0 0 80 60" fill="none">
        <rect x="5" y="15" width="60" height="30" rx="6" fill={colors.notion.gray.bg} stroke={colors.notion.gray.text} strokeWidth="2" />
        <text x="15" y="35" fontSize="12" fill={colors.notion.gray.text}>Text...</text>
        <circle cx="65" cy="40" r="8" fill={fill} />
        <text
          x="65"
          y="40"
          fontSize="12"
          fill={colors.background.text}
          fontWeight="bold"
          textAnchor="middle"
          dominantBaseline="central"
        >
          {badgeText}
        </text>
      </svg>
    </div>
  );
}

export function IconWorkaround({ width = 120, height = 60, className }: IconProps) {
  return (
    <div className={cn("flex justify-center", className)}>
      <svg width={width} height={height} viewBox="0 0 120 60" fill="none">
        <rect x="10" y="18" width="100" height="24" rx="12" fill={colors.background.bg} stroke={colors.notion.blue.text} strokeWidth="2" />
        <text x="20" y="34" fontSize="12" fill={colors.muted.text}>google searchâ€¦</text>
        <circle cx="96" cy="30" r="7" stroke={colors.notion.blue.text} strokeWidth="2" />
        <line x1="100" y1="34" x2="108" y2="42" stroke={colors.notion.blue.text} strokeWidth="2" />
      </svg>
    </div>
  );
}

export function IconManualDelete({ width = 80, height = 60, className }: IconProps) {
  return (
    <div className={cn("flex justify-center", className)}>
      <svg width={width} height={height} viewBox="0 0 80 60" fill="none">
        <rect x="5" y="15" width="70" height="30" rx="6" fill={colors.notion.gray.bg} stroke={colors.notion.gray.text} strokeWidth="2" />
        <rect x="15" y="28" width="40" height="6" fill={colors.notion.blue.bg} />
        <line x1="55" y1="25" x2="55" y2="45" stroke={colors.notion.blue.text} strokeWidth="3" markerEnd="url(#arrow)" />
        <defs>
          <marker id="arrow" markerWidth="6" markerHeight="6" refX="3" refY="3" orient="auto">
            <path d="M0,0 L0,6 L6,3 z" fill={colors.notion.blue.text} />
          </marker>
        </defs>
      </svg>
    </div>
  );
}

export function IconEmptyField({ width = 80, height = 60, className, badgeColor = "success", badgeText = "âœ“" }: BadgeIconProps) {
  const fill = badgeColor === "success" ? colors.notion.green.bg : colors.notion.red.bg;
  return (
    <div className={cn("flex justify-center", className)}>
      <svg width={width} height={height} viewBox="0 0 80 60" fill="none">
        <rect x="5" y="15" width="60" height="30" rx="6" fill={colors.notion.gray.bg} stroke={colors.notion.gray.text} strokeWidth="2" />
        <text x="15" y="35" fontSize="12" fill={colors.notion.gray.text}>Text...</text>
        <circle cx="65" cy="40" r="8" fill={fill} />
        <text
          x="65"
          y="40"
          fontSize="12"
          fill={colors.background.text}
          fontWeight="bold"
          textAnchor="middle"
          dominantBaseline="central"
        >
          {badgeText}
        </text>
      </svg>
    </div>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\common\Footer.tsx
==============================

import { Link } from "react-router-dom";
import Section from "@/components/ui/Section";
import { typography, colors } from "@/lib/tokens";
import { cn } from "@/lib/utils";

export default function Footer() {
  const year = new Date().getFullYear();

  return (
    <footer className={cn("border-t border-border")}>
      {/* âœ… Section Ã¼bernimmt bereits die einheitliche Breite */}
      <Section id="footer" spacing="sm" className="py-6" fullWidth>
        <div className="mx-auto w-full max-w-[1900px] px-[3vw] flex flex-col sm:flex-row items-center justify-between gap-4">
          <p
            className={cn(
              typography.small.font,
              typography.small.size,
              typography.small.weight,
              typography.small.leading,
              colors.muted.text
            )}
          >
            Â© {year} Felix Bruckmeier â€” All rights reserved.
          </p>

          <nav
            className={cn(
              "flex items-center gap-4",
              typography.small.font,
              typography.small.size,
              typography.small.leading
            )}
          >
            <Link
              to="/imprint"
              className={cn(colors.muted.text, "hover:underline hover:opacity-80")}
            >
              Imprint
            </Link>
            <Link
              to="/privacy"
              className={cn(colors.muted.text, "hover:underline hover:opacity-80")}
            >
              Privacy
            </Link>
          </nav>
        </div>
      </Section>
    </footer>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\common\ImprintSection.tsx
==============================

import Section from "@/components/ui/Section";
import Tile from "@/components/ui/Tile";
import { Subtitle, Body } from "@/components/ui/Tokens";
import { User, Mail, Info } from "lucide-react";

export default function ImprintSection() {
  return (
    <Section id="imprint" spacing="md" fullWidth={false} title="Imprint">
      <div className="grid gap-6 md:grid-cols-2">
        {/* Responsible */}
        <Tile variant="static">
          <div className="flex items-center gap-2 mb-3">
            <User className="w-5 h-5 text-muted-foreground" />
            <Subtitle>Responsible for this Website</Subtitle>
          </div>
          <Body>
            Felix Bruckmeier
            <br />
            Munich, Germany
          </Body>
        </Tile>

        {/* Contact */}
        <Tile variant="static">
          <div className="flex items-center gap-2 mb-3">
            <Mail className="w-5 h-5 text-muted-foreground" />
            <Subtitle>Contact</Subtitle>
          </div>
          <Body>
            <a
              href="mailto:felixbruckmeier@googlemail.com"
              className="text-accent hover:underline"
            >
              felixbruckmeier@googlemail.com
            </a>
          </Body>
        </Tile>

        {/* Legal Note */}
        <Tile variant="static" className="md:col-span-2">
          <div className="flex items-center gap-2 mb-3">
            <Info className="w-5 h-5 text-muted-foreground" />
            <Subtitle>Legal Notice</Subtitle>
          </div>
          <Body>
            This website is a private, non-commercial portfolio project. It is
            not intended for business purposes, but serves solely to present
            selected work and expertise.
          </Body>
        </Tile>
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\common\LanguageToggle.tsx
==============================

import { useTranslation } from "react-i18next";

export default function LanguageToggle() {
  const { i18n } = useTranslation();
  const curr = i18n.language.startsWith("de") ? "de" : "en";
  const next = curr === "de" ? "en" : "de";
  return (
    <button
      className="px-3 py-2 rounded-lg border border-neutral-300 dark:border-neutral-700
                 hover:bg-muted transition text-sm
                 text-neutral-700 dark:text-neutral-300"
      onClick={() => i18n.changeLanguage(next)}
      aria-label="Toggle language"
      title={curr === "de" ? "Switch to English" : "Auf Deutsch umschalten"}
    >
      {curr.toUpperCase()}
    </button>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\common\Navbar.tsx
==============================

// src/components/layout/NavBar.tsx
import { Link, useLocation } from "react-router-dom";
import { useEffect, useRef, useState } from "react";
import { useTranslation } from "react-i18next";
import ThemeToggle from "@/components/common/ThemeToggle";
import { typography } from "@/lib/tokens";
import { cn } from "@/lib/utils";

const NAV = ["expertise", "projects", "cv", "contact"] as const;

export default function NavBar() {
  const { t } = useTranslation();
  const { pathname, hash } = useLocation();
  const onHome = pathname === "/";
  const [active, setActive] = useState<string>("");
  const [open, setOpen] = useState(false);

  // smooth scroll
  useEffect(() => {
    const prev = document.documentElement.style.scrollBehavior;
    document.documentElement.style.scrollBehavior = "smooth";
    return () => {
      document.documentElement.style.scrollBehavior = prev;
    };
  }, []);

  // intersection observer
  const observerRef = useRef<IntersectionObserver | null>(null);
  useEffect(() => {
    if (!onHome) return;
    const sections = NAV.map((id) => document.getElementById(id)).filter(Boolean) as HTMLElement[];
    if (observerRef.current) observerRef.current.disconnect();
    observerRef.current = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.getAttribute("id") || "";
            setActive(id);
            history.replaceState(null, "", `#${id}`);
          }
        });
      },
      { threshold: 0.5, rootMargin: "-20% 0px -50% 0px" }
    );
    sections.forEach((s) => observerRef.current?.observe(s));
    return () => observerRef.current?.disconnect();
  }, [onHome]);

  const hrefFor = (id: string) => `/#${id}`;
  useEffect(() => setActive(hash.replace("#", "")), [hash]);
  useEffect(() => setOpen(false), [hash, pathname]);

  const handleNavClick = (e: React.MouseEvent<HTMLAnchorElement>, id: string) => {
    if (!onHome) {
      e.preventDefault();
      window.location.assign(`/#${id}`);
    }
  };

  return (
    <>
      <header className="fixed top-0 left-0 right-0 z-50 bg-background/90 backdrop-blur-md supports-[backdrop-filter]:bg-background/80">
        {/* âœ… Einheitliche Containerbreite */}
        <nav className="mx-auto w-full max-w-[1900px] px-[3vw] flex h-20 items-center justify-between">
          <Link
            to="/"
            onClick={(e) => {
              if (window.location.pathname === "/") {
                e.preventDefault();
                window.scrollTo({ top: 0, behavior: "smooth" });
              }
            }}
            className={cn("flex flex-col items-start text-foreground", typography.subtitle.font)}
          >
            <span className="text-2xl font-bold leading-tight">Felix</span>
            <span className="text-2xl font-bold leading-tight">Bruckmeier</span>
            <div className="mt-1 w-full border-b border-border" />
          </Link>

          <ul className="hidden md:flex items-center gap-8 text-sm font-semibold">
            {NAV.map((id) => (
              <li key={id}>
                <a
                  href={hrefFor(id)}
                  onClick={(e) => handleNavClick(e, id)}
                  aria-current={active === id ? "page" : undefined}
                  className={cn(
                    "px-1 py-2 underline underline-offset-4 decoration-transparent transition",
                    active === id
                      ? "text-primary decoration-current"
                      : "text-muted-foreground hover:text-foreground hover:decoration-current"
                  )}
                >
                  {t(`nav.${id}`)}
                </a>
              </li>
            ))}
            <li>
              <ThemeToggle />
            </li>
          </ul>

          {/* Mobile */}
          <div className="flex items-center gap-3 md:hidden">
            <ThemeToggle />
            <button
              aria-label="Toggle menu"
              onClick={() => setOpen((v) => !v)}
              className="inline-flex items-center justify-center h-10 w-10 rounded-md border border-border text-foreground transition"
            >
              <div className={cn("transition-transform duration-300", open && "rotate-45")}>
                <div className="w-5 h-0.5 bg-current mb-1"></div>
                <div className={cn("w-5 h-0.5 bg-current", open && "opacity-0")}></div>
                <div className="w-5 h-0.5 bg-current mt-1"></div>
              </div>
            </button>
          </div>
        </nav>

        {/* Mobile MenÃ¼ */}
        <div
          className={cn(
            "md:hidden overflow-hidden transition-[max-height,opacity] duration-300 ease-in-out border-t border-border bg-background/95 backdrop-blur-sm",
            open ? "max-h-[1000px] opacity-100" : "max-h-0 opacity-0"
          )}
        >
          <div className="mx-auto w-full max-w-[1900px] px-[3vw] py-3 space-y-2">
            {NAV.map((id) => (
              <div key={id}>
                <a
                  href={hrefFor(id)}
                  onClick={(e) => handleNavClick(e, id)}
                  className="block py-2 font-medium text-foreground"
                >
                  {t(`nav.${id}`)}
                </a>
              </div>
            ))}
          </div>
        </div>
      </header>
      <div className="h-20" />
    </>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\common\PrivacySection.tsx
==============================

import Section from "@/components/ui/Section";
import Tile from "@/components/ui/Tile";
import { Subtitle, Body } from "@/components/ui/Tokens";
import { Mail, Shield, Server, Eye } from "lucide-react";

export default function PrivacySection() {
  return (
    <Section id="privacy" title="Privacy" spacing="md" fullWidth={false}>
      <div className="grid gap-6 md:grid-cols-2">
        {/* General Info */}
        <Tile variant="static">
          <div className="flex items-center gap-2 mb-3">
            <Shield className="w-5 h-5 text-muted-foreground" />
            <Subtitle>General Information</Subtitle>
          </div>
          <Body>
            This website is operated as a private, non-commercial portfolio
            project. No personal data is actively collected.
          </Body>
        </Tile>

        {/* Contact */}
        <Tile variant="static">
          <div className="flex items-center gap-2 mb-3">
            <Mail className="w-5 h-5 text-muted-foreground" />
            <Subtitle>Contact</Subtitle>
          </div>
          <Body>
            If you contact me by email, your data will be used solely to process
            your request.
          </Body>
          <Body className="mt-2">
            <a
              href="mailto:felixbruckmeier@googlemail.com"
              className="text-accent hover:underline"
            >
              felixbruckmeier@googlemail.com
            </a>
          </Body>
        </Tile>

        {/* Hosting */}
        <Tile variant="static">
          <div className="flex items-center gap-2 mb-3">
            <Server className="w-5 h-5 text-muted-foreground" />
            <Subtitle>Hosting</Subtitle>
          </div>
          <Body>
            This website is hosted on GitHub Pages. Technical information (such
            as IP address, browser type, operating system) may be logged
            automatically for delivery and security purposes.
          </Body>
          <Body className="mt-2">
            <a
              href="https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement"
              target="_blank"
              rel="noopener noreferrer"
              className="text-accent hover:underline"
            >
              GitHub Privacy Policy
            </a>
          </Body>
        </Tile>

        {/* No Tracking */}
        <Tile variant="static">
          <div className="flex items-center gap-2 mb-3">
            <Eye className="w-5 h-5 text-muted-foreground" />
            <Subtitle>No Tracking</Subtitle>
          </div>
          <Body>
            This website does not use cookies, analytics tools, or tracking
            technologies.
          </Body>
        </Tile>
      </div>

      {/* Rights of Data Subjects */}
      <div className="mt-10">
        <Subtitle className="mb-3">Rights of Data Subjects</Subtitle>
        <Body>
          You have the right to request information about the personal data
          stored about you, as well as the right to correction, deletion, and
          restriction of processing in accordance with applicable data
          protection laws.
        </Body>
      </div>
    </Section>
  );
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\common\ScrollToTop.tsx
==============================

// src/components/common/ScrollToTop.tsx
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

export default function ScrollToTop() {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 0,
      behavior: "instant", // oder "smooth" fÃ¼r sanftes Scrollen
    });
  }, [pathname]);

  return null;
}



==============================
C:\Users\felix\Documents\GitHub\felixbruckmeier.github.io\src\components\common\ThemeToggle.tsx
==============================

import { useEffect, useState } from "react";

type Mode = "light" | "dark";

function getInitialTheme(): Mode {
  const stored = localStorage.getItem("theme");
  if (stored === "light" || stored === "dark") return stored;
  return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
}

export default function ThemeToggle() {
  const [theme, setTheme] = useState<Mode>(getInitialTheme());

  useEffect(() => {
    const root = document.documentElement;
    if (theme === "dark") {
      root.classList.add("dark");
      root.style.colorScheme = "dark";
    } else {
      root.classList.remove("dark");
      root.style.colorScheme = "light";
    }
    localStorage.setItem("theme", theme);
  }, [theme]);

  return (
    <button
      aria-label="Toggle theme"
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="rounded-md border border-neutral-300 dark:border-neutral-700 px-2 py-1 text-xs
                 text-neutral-700 dark:text-neutral-300"
      title={theme === "dark" ? "Switch to light" : "Switch to dark"}
    >
      {theme === "dark" ? "Light" : "Dark"}
    </button>
  );
}

